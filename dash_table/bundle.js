window.dash_table=function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=34)}([function(e,t,n){e.exports=n(32)()},function(e,t){e.exports=window.React},function(e,t,n){var r;
/*!
  Copyright (c) 2016 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/*!
  Copyright (c) 2016 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
!function(){"use strict";var n={}.hasOwnProperty;function o(){for(var e=[],t=0;t<arguments.length;t++){var r=arguments[t];if(r){var i=typeof r;if("string"===i||"number"===i)e.push(r);else if(Array.isArray(r))e.push(o.apply(null,r));else if("object"===i)for(var u in r)n.call(r,u)&&r[u]&&e.push(u)}}return e.join(" ")}void 0!==e&&e.exports?e.exports=o:void 0===(r=function(){return o}.apply(t,[]))||(e.exports=r)}()},function(e,t,n){"use strict";function r(e){return null!=e&&"object"==typeof e&&!0===e["@@functional/placeholder"]}function o(e){return function t(n){return 0===arguments.length||r(n)?t:e.apply(this,arguments)}}n.r(t);var i=o(function(e){return function(){return e}}),u=i(!1),a=i(!0),s={"@@functional/placeholder":!0};function l(e){return function t(n,i){switch(arguments.length){case 0:return t;case 1:return r(n)?t:o(function(t){return e(n,t)});default:return r(n)&&r(i)?t:r(n)?o(function(t){return e(t,i)}):r(i)?o(function(t){return e(n,t)}):e(n,i)}}}var c=l(function(e,t){return Number(e)+Number(t)});function f(e,t){var n;e=e||[],t=t||[];var r=e.length,o=t.length,i=[];for(n=0;n<r;)i[i.length]=e[n],n+=1;for(n=0;n<o;)i[i.length]=t[n],n+=1;return i}function p(e,t){switch(e){case 0:return function(){return t.apply(this,arguments)};case 1:return function(e){return t.apply(this,arguments)};case 2:return function(e,n){return t.apply(this,arguments)};case 3:return function(e,n,r){return t.apply(this,arguments)};case 4:return function(e,n,r,o){return t.apply(this,arguments)};case 5:return function(e,n,r,o,i){return t.apply(this,arguments)};case 6:return function(e,n,r,o,i,u){return t.apply(this,arguments)};case 7:return function(e,n,r,o,i,u,a){return t.apply(this,arguments)};case 8:return function(e,n,r,o,i,u,a,s){return t.apply(this,arguments)};case 9:return function(e,n,r,o,i,u,a,s,l){return t.apply(this,arguments)};case 10:return function(e,n,r,o,i,u,a,s,l,c){return t.apply(this,arguments)};default:throw new Error("First argument to _arity must be a non-negative integer no greater than ten")}}function d(e,t,n){return function(){for(var o=[],i=0,u=e,a=0;a<t.length||i<arguments.length;){var s;a<t.length&&(!r(t[a])||i>=arguments.length)?s=t[a]:(s=arguments[i],i+=1),o[a]=s,r(s)||(u-=1),a+=1}return u<=0?n.apply(this,o):p(u,d(e,o,n))}}var h=l(function(e,t){return 1===e?o(t):p(e,d(e,[],t))}),v=o(function(e){return h(e.length,function(){var t=0,n=arguments[0],r=arguments[arguments.length-1],o=Array.prototype.slice.call(arguments,0);return o[0]=function(){var e=n.apply(this,f(arguments,[t,r]));return t+=1,e},e.apply(this,o)})});function y(e){return function t(n,i,u){switch(arguments.length){case 0:return t;case 1:return r(n)?t:l(function(t,r){return e(n,t,r)});case 2:return r(n)&&r(i)?t:r(n)?l(function(t,n){return e(t,i,n)}):r(i)?l(function(t,r){return e(n,t,r)}):o(function(t){return e(n,i,t)});default:return r(n)&&r(i)&&r(u)?t:r(n)&&r(i)?l(function(t,n){return e(t,n,u)}):r(n)&&r(u)?l(function(t,n){return e(t,i,n)}):r(i)&&r(u)?l(function(t,r){return e(n,t,r)}):r(n)?o(function(t){return e(t,i,u)}):r(i)?o(function(t){return e(n,t,u)}):r(u)?o(function(t){return e(n,i,t)}):e(n,i,u)}}}var m=y(function(e,t,n){if(t>=n.length||t<-n.length)return n;var r=(t<0?n.length:0)+t,o=f(n);return o[r]=e(n[r]),o}),b=Array.isArray||function(e){return null!=e&&e.length>=0&&"[object Array]"===Object.prototype.toString.call(e)};function g(e){return"function"==typeof e["@@transducer/step"]}function E(e,t,n){return function(){if(0===arguments.length)return n();var r=Array.prototype.slice.call(arguments,0),o=r.pop();if(!b(o)){for(var i=0;i<e.length;){if("function"==typeof o[e[i]])return o[e[i]].apply(o,r);i+=1}if(g(o))return t.apply(null,r)(o)}return n.apply(this,arguments)}}function w(e){return e&&e["@@transducer/reduced"]?e:{"@@transducer/value":e,"@@transducer/reduced":!0}}var x={init:function(){return this.xf["@@transducer/init"]()},result:function(e){return this.xf["@@transducer/result"](e)}},O=function(){function e(e,t){this.xf=t,this.f=e,this.all=!0}return e.prototype["@@transducer/init"]=x.init,e.prototype["@@transducer/result"]=function(e){return this.all&&(e=this.xf["@@transducer/step"](e,!0)),this.xf["@@transducer/result"](e)},e.prototype["@@transducer/step"]=function(e,t){return this.f(t)||(this.all=!1,e=w(this.xf["@@transducer/step"](e,!1))),e},e}(),S=l(E(["all"],l(function(e,t){return new O(e,t)}),function(e,t){for(var n=0;n<t.length;){if(!e(t[n]))return!1;n+=1}return!0})),C=l(function(e,t){return t>e?t:e});function k(e,t){for(var n=0,r=t.length,o=Array(r);n<r;)o[n]=e(t[n]),n+=1;return o}function _(e){return"[object String]"===Object.prototype.toString.call(e)}var A=o(function(e){return!!b(e)||!!e&&("object"==typeof e&&(!_(e)&&(1===e.nodeType?!!e.length:0===e.length||e.length>0&&(e.hasOwnProperty(0)&&e.hasOwnProperty(e.length-1)))))}),F=function(){function e(e){this.f=e}return e.prototype["@@transducer/init"]=function(){throw new Error("init not implemented on XWrap")},e.prototype["@@transducer/result"]=function(e){return e},e.prototype["@@transducer/step"]=function(e,t){return this.f(e,t)},e}();function D(e){return new F(e)}var T=l(function(e,t){return p(e.length,function(){return e.apply(t,arguments)})});function P(e,t,n){for(var r=n.next();!r.done;){if((t=e["@@transducer/step"](t,r.value))&&t["@@transducer/reduced"]){t=t["@@transducer/value"];break}r=n.next()}return e["@@transducer/result"](t)}function j(e,t,n,r){return e["@@transducer/result"](n[r](T(e["@@transducer/step"],e),t))}var R="undefined"!=typeof Symbol?Symbol.iterator:"@@iterator";function M(e,t,n){if("function"==typeof e&&(e=D(e)),A(n))return function(e,t,n){for(var r=0,o=n.length;r<o;){if((t=e["@@transducer/step"](t,n[r]))&&t["@@transducer/reduced"]){t=t["@@transducer/value"];break}r+=1}return e["@@transducer/result"](t)}(e,t,n);if("function"==typeof n["fantasy-land/reduce"])return j(e,t,n,"fantasy-land/reduce");if(null!=n[R])return P(e,t,n[R]());if("function"==typeof n.next)return P(e,t,n);if("function"==typeof n.reduce)return j(e,t,n,"reduce");throw new TypeError("reduce: list must be array or iterable")}var N=function(){function e(e,t){this.xf=t,this.f=e}return e.prototype["@@transducer/init"]=x.init,e.prototype["@@transducer/result"]=x.result,e.prototype["@@transducer/step"]=function(e,t){return this.xf["@@transducer/step"](e,this.f(t))},e}(),I=l(function(e,t){return new N(e,t)});function B(e,t){return Object.prototype.hasOwnProperty.call(t,e)}var V=Object.prototype.toString,z=function(){return"[object Arguments]"===V.call(arguments)?function(e){return"[object Arguments]"===V.call(e)}:function(e){return B("callee",e)}},K=!{toString:null}.propertyIsEnumerable("toString"),L=["constructor","valueOf","isPrototypeOf","toString","propertyIsEnumerable","hasOwnProperty","toLocaleString"],W=function(){return arguments.propertyIsEnumerable("length")}(),q=function(e,t){for(var n=0;n<e.length;){if(e[n]===t)return!0;n+=1}return!1},U=o("function"!=typeof Object.keys||W?function(e){if(Object(e)!==e)return[];var t,n,r=[],o=W&&z(e);for(t in e)!B(t,e)||o&&"length"===t||(r[r.length]=t);if(K)for(n=L.length-1;n>=0;)B(t=L[n],e)&&!q(r,t)&&(r[r.length]=t),n-=1;return r}:function(e){return Object(e)!==e?[]:Object.keys(e)}),H=l(E(["fantasy-land/map","map"],I,function(e,t){switch(Object.prototype.toString.call(t)){case"[object Function]":return h(t.length,function(){return e.call(this,t.apply(this,arguments))});case"[object Object]":return M(function(n,r){return n[r]=e(t[r]),n},{},U(t));default:return k(e,t)}})),Y=l(function(e,t){for(var n=t,r=0;r<e.length;){if(null==n)return;n=n[e[r]],r+=1}return n}),X=l(function(e,t){return Y([e],t)}),G=l(function(e,t){return H(X(e),t)}),J=y(M),$=o(function(e){return h(J(C,0,G("length",e)),function(){for(var t=0,n=e.length;t<n;){if(!e[t].apply(this,arguments))return!1;t+=1}return!0})}),Z=l(function(e,t){return e&&t}),Q=function(){function e(e,t){this.xf=t,this.f=e,this.any=!1}return e.prototype["@@transducer/init"]=x.init,e.prototype["@@transducer/result"]=function(e){return this.any||(e=this.xf["@@transducer/step"](e,!1)),this.xf["@@transducer/result"](e)},e.prototype["@@transducer/step"]=function(e,t){return this.f(t)&&(this.any=!0,e=w(this.xf["@@transducer/step"](e,!0))),e},e}(),ee=l(function(e,t){return new Q(e,t)}),te=l(E(["any"],ee,function(e,t){for(var n=0;n<t.length;){if(e(t[n]))return!0;n+=1}return!1})),ne=o(function(e){return h(J(C,0,G("length",e)),function(){for(var t=0,n=e.length;t<n;){if(e[t].apply(this,arguments))return!0;t+=1}return!1})}),re=l(function(e,t){return"function"==typeof t["fantasy-land/ap"]?t["fantasy-land/ap"](e):"function"==typeof e.ap?e.ap(t):"function"==typeof e?function(n){return e(n)(t(n))}:M(function(e,n){return f(e,H(n,t))},[],e)});var oe=function(){function e(e,t){this.xf=t,this.pos=0,this.full=!1,this.acc=new Array(e)}return e.prototype["@@transducer/init"]=x.init,e.prototype["@@transducer/result"]=function(e){return this.acc=null,this.xf["@@transducer/result"](e)},e.prototype["@@transducer/step"]=function(e,t){return this.store(t),this.full?this.xf["@@transducer/step"](e,this.getCopy()):e},e.prototype.store=function(e){this.acc[this.pos]=e,this.pos+=1,this.pos===this.acc.length&&(this.pos=0,this.full=!0)},e.prototype.getCopy=function(){return f(Array.prototype.slice.call(this.acc,this.pos),Array.prototype.slice.call(this.acc,0,this.pos))},e}(),ie=l(E([],l(function(e,t){return new oe(e,t)}),function(e,t){for(var n=0,r=t.length-(e-1),o=new Array(r>=0?r:0);n<r;)o[n]=Array.prototype.slice.call(t,n,n+e),n+=1;return o})),ue=l(function(e,t){return f(t,[e])}),ae=l(function(e,t){return e.apply(this,t)}),se=o(function(e){for(var t=U(e),n=t.length,r=[],o=0;o<n;)r[o]=e[t[o]],o+=1;return r}),le=o(function e(t){return t=H(function(t){return"function"==typeof t?t:e(t)},t),h(J(C,0,G("length",se(t))),function(){var e=arguments;return H(function(t){return ae(t,e)},t)})}),ce=l(function(e,t){return t(e)}),fe=y(function(e,t,n){var r=e(t),o=e(n);return r<o?-1:r>o?1:0}),pe=y(function(e,t,n){var r={};for(var o in n)r[o]=n[o];return r[e]=t,r}),de=Number.isInteger||function(e){return e<<0===e},he=o(function(e){return null==e}),ve=y(function e(t,n,r){if(0===t.length)return n;var o=t[0];if(t.length>1){var i=!he(r)&&B(o,r)?r[o]:de(t[1])?[]:{};n=e(Array.prototype.slice.call(t,1),n,i)}if(de(o)&&b(r)){var u=[].concat(r);return u[o]=n,u}return pe(o,n,r)}),ye=l(function(e,t){switch(e){case 0:return function(){return t.call(this)};case 1:return function(e){return t.call(this,e)};case 2:return function(e,n){return t.call(this,e,n)};case 3:return function(e,n,r){return t.call(this,e,n,r)};case 4:return function(e,n,r,o){return t.call(this,e,n,r,o)};case 5:return function(e,n,r,o,i){return t.call(this,e,n,r,o,i)};case 6:return function(e,n,r,o,i,u){return t.call(this,e,n,r,o,i,u)};case 7:return function(e,n,r,o,i,u,a){return t.call(this,e,n,r,o,i,u,a)};case 8:return function(e,n,r,o,i,u,a,s){return t.call(this,e,n,r,o,i,u,a,s)};case 9:return function(e,n,r,o,i,u,a,s,l){return t.call(this,e,n,r,o,i,u,a,s,l)};case 10:return function(e,n,r,o,i,u,a,s,l,c){return t.call(this,e,n,r,o,i,u,a,s,l,c)};default:throw new Error("First argument to nAry must be a non-negative integer no greater than ten")}}),me=o(function(e){return ye(2,e)});function be(e){return"[object Function]"===Object.prototype.toString.call(e)}var ge=l(function(e,t){var n=h(e,t);return h(e,function(){return M(re,H(n,arguments[0]),Array.prototype.slice.call(arguments,1))})}),Ee=o(function(e){return ge(e.length,e)}),we=l(function(e,t){return be(e)?function(){return e.apply(this,arguments)&&t.apply(this,arguments)}:Ee(Z)(e,t)}),xe=o(function(e){return h(e.length,e)}),Oe=xe(function(e){return e.apply(this,Array.prototype.slice.call(arguments,1))});function Se(e){return function t(n){for(var r,o,i,u=[],a=0,s=n.length;a<s;){if(A(n[a]))for(i=0,o=(r=e?t(n[a]):n[a]).length;i<o;)u[u.length]=r[i],i+=1;else u[u.length]=n[a];a+=1}return u}}var Ce=function(e){var t=function(e){return{"@@transducer/init":x.init,"@@transducer/result":function(t){return e["@@transducer/result"](t)},"@@transducer/step":function(t,n){var r=e["@@transducer/step"](t,n);return r["@@transducer/reduced"]?{"@@transducer/value":r,"@@transducer/reduced":!0}:r}}}(e);return{"@@transducer/init":x.init,"@@transducer/result":function(e){return t["@@transducer/result"](e)},"@@transducer/step":function(e,n){return A(n)?M(t,e,n):M(t,e,[n])}}},ke=l(E(["fantasy-land/chain","chain"],l(function(e,t){return H(e,Ce(t))}),function(e,t){return"function"==typeof t?function(n){return e(t(n))(n)}:Se(!1)(H(e,t))})),_e=y(function(e,t,n){if(e>t)throw new Error("min must not be greater than max in clamp(min, max, value)");return n<e?e:n>t?t:n});function Ae(e){return new RegExp(e.source,(e.global?"g":"")+(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.sticky?"y":"")+(e.unicode?"u":""))}var Fe=o(function(e){return null===e?"Null":void 0===e?"Undefined":Object.prototype.toString.call(e).slice(8,-1)});function De(e,t,n,r){var o=function(o){for(var i=t.length,u=0;u<i;){if(e===t[u])return n[u];u+=1}for(var a in t[u+1]=e,n[u+1]=o,e)o[a]=r?De(e[a],t,n,!0):e[a];return o};switch(Fe(e)){case"Object":return o({});case"Array":return o([]);case"Date":return new Date(e.valueOf());case"RegExp":return Ae(e);default:return e}}var Te=o(function(e){return null!=e&&"function"==typeof e.clone?e.clone():De(e,[],[],!0)}),Pe=o(function(e){return function(t,n){return e(t,n)?-1:e(n,t)?1:0}}),je=o(function(e){return!e}),Re=Ee(je);function Me(e,t){return function(){return t.call(this,e.apply(this,arguments))}}function Ne(e,t){return function(){var n=arguments.length;if(0===n)return t();var r=arguments[n-1];return b(r)||"function"!=typeof r[e]?t.apply(this,arguments):r[e].apply(r,Array.prototype.slice.call(arguments,0,n-1))}}var Ie=y(Ne("slice",function(e,t,n){return Array.prototype.slice.call(n,e,t)})),Be=o(Ne("tail",Ie(1,1/0)));function Ve(){if(0===arguments.length)throw new Error("pipe requires at least one argument");return p(arguments[0].length,J(Me,arguments[0],Be(arguments)))}var ze=o(function(e){return _(e)?e.split("").reverse().join(""):Array.prototype.slice.call(e,0).reverse()});function Ke(){if(0===arguments.length)throw new Error("compose requires at least one argument");return Ve.apply(this,ze(arguments))}function Le(){if(0===arguments.length)throw new Error("composeK requires at least one argument");var e=Array.prototype.slice.call(arguments),t=e.pop();return Ke(Ke.apply(this,H(ke,e)),t)}function We(e,t){return function(){var n=this;return e.apply(n,arguments).then(function(e){return t.call(n,e)})}}function qe(){if(0===arguments.length)throw new Error("pipeP requires at least one argument");return p(arguments[0].length,J(We,arguments[0],Be(arguments)))}function Ue(){if(0===arguments.length)throw new Error("composeP requires at least one argument");return qe.apply(this,ze(arguments))}function He(e){for(var t,n=[];!(t=e.next()).done;)n.push(t.value);return n}function Ye(e,t,n){for(var r=0,o=n.length;r<o;){if(e(t,n[r]))return!0;r+=1}return!1}var Xe=l(function(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t});function Ge(e,t,n,r){var o=He(e);function i(e,t){return Je(e,t,n.slice(),r.slice())}return!Ye(function(e,t){return!Ye(i,t,e)},He(t),o)}function Je(e,t,n,r){if(Xe(e,t))return!0;var o,i,u=Fe(e);if(u!==Fe(t))return!1;if(null==e||null==t)return!1;if("function"==typeof e["fantasy-land/equals"]||"function"==typeof t["fantasy-land/equals"])return"function"==typeof e["fantasy-land/equals"]&&e["fantasy-land/equals"](t)&&"function"==typeof t["fantasy-land/equals"]&&t["fantasy-land/equals"](e);if("function"==typeof e.equals||"function"==typeof t.equals)return"function"==typeof e.equals&&e.equals(t)&&"function"==typeof t.equals&&t.equals(e);switch(u){case"Arguments":case"Array":case"Object":if("function"==typeof e.constructor&&"Promise"===(o=e.constructor,null==(i=String(o).match(/^function (\w*)/))?"":i[1]))return e===t;break;case"Boolean":case"Number":case"String":if(typeof e!=typeof t||!Xe(e.valueOf(),t.valueOf()))return!1;break;case"Date":if(!Xe(e.valueOf(),t.valueOf()))return!1;break;case"Error":return e.name===t.name&&e.message===t.message;case"RegExp":if(e.source!==t.source||e.global!==t.global||e.ignoreCase!==t.ignoreCase||e.multiline!==t.multiline||e.sticky!==t.sticky||e.unicode!==t.unicode)return!1}for(var a=n.length-1;a>=0;){if(n[a]===e)return r[a]===t;a-=1}switch(u){case"Map":return e.size===t.size&&Ge(e.entries(),t.entries(),n.concat([e]),r.concat([t]));case"Set":return e.size===t.size&&Ge(e.values(),t.values(),n.concat([e]),r.concat([t]));case"Arguments":case"Array":case"Object":case"Boolean":case"Number":case"String":case"Date":case"Error":case"RegExp":case"Int8Array":case"Uint8Array":case"Uint8ClampedArray":case"Int16Array":case"Uint16Array":case"Int32Array":case"Uint32Array":case"Float32Array":case"Float64Array":case"ArrayBuffer":break;default:return!1}var s=U(e);if(s.length!==U(t).length)return!1;var l=n.concat([e]),c=r.concat([t]);for(a=s.length-1;a>=0;){var f=s[a];if(!B(f,t)||!Je(t[f],e[f],l,c))return!1;a-=1}return!0}var $e=l(function(e,t){return Je(e,t,[],[])});function Ze(e,t,n){var r,o;if("function"==typeof e.indexOf)switch(typeof t){case"number":if(0===t){for(r=1/t;n<e.length;){if(0===(o=e[n])&&1/o===r)return n;n+=1}return-1}if(t!=t){for(;n<e.length;){if("number"==typeof(o=e[n])&&o!=o)return n;n+=1}return-1}return e.indexOf(t,n);case"string":case"boolean":case"function":case"undefined":return e.indexOf(t,n);case"object":if(null===t)return e.indexOf(t,n)}for(;n<e.length;){if($e(e[n],t))return n;n+=1}return-1}function Qe(e,t){return Ze(t,e,0)>=0}function et(e){return'"'+e.replace(/\\/g,"\\\\").replace(/[\b]/g,"\\b").replace(/\f/g,"\\f").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/\t/g,"\\t").replace(/\v/g,"\\v").replace(/\0/g,"\\0").replace(/"/g,'\\"')+'"'}var tt=function(e){return(e<10?"0":"")+e},nt="function"==typeof Date.prototype.toISOString?function(e){return e.toISOString()}:function(e){return e.getUTCFullYear()+"-"+tt(e.getUTCMonth()+1)+"-"+tt(e.getUTCDate())+"T"+tt(e.getUTCHours())+":"+tt(e.getUTCMinutes())+":"+tt(e.getUTCSeconds())+"."+(e.getUTCMilliseconds()/1e3).toFixed(3).slice(2,5)+"Z"};function rt(e){return function(){return!e.apply(this,arguments)}}function ot(e,t){for(var n=0,r=t.length,o=[];n<r;)e(t[n])&&(o[o.length]=t[n]),n+=1;return o}function it(e){return"[object Object]"===Object.prototype.toString.call(e)}var ut=function(){function e(e,t){this.xf=t,this.f=e}return e.prototype["@@transducer/init"]=x.init,e.prototype["@@transducer/result"]=x.result,e.prototype["@@transducer/step"]=function(e,t){return this.f(t)?this.xf["@@transducer/step"](e,t):e},e}(),at=l(E(["filter"],l(function(e,t){return new ut(e,t)}),function(e,t){return it(t)?M(function(n,r){return e(t[r])&&(n[r]=t[r]),n},{},U(t)):ot(e,t)})),st=l(function(e,t){return at(rt(e),t)});var lt=o(function(e){return function e(t,n){var r=function(r){var o=n.concat([t]);return Qe(r,o)?"<Circular>":e(r,o)},o=function(e,t){return k(function(t){return et(t)+": "+r(e[t])},t.slice().sort())};switch(Object.prototype.toString.call(t)){case"[object Arguments]":return"(function() { return arguments; }("+k(r,t).join(", ")+"))";case"[object Array]":return"["+k(r,t).concat(o(t,st(function(e){return/^\d+$/.test(e)},U(t)))).join(", ")+"]";case"[object Boolean]":return"object"==typeof t?"new Boolean("+r(t.valueOf())+")":t.toString();case"[object Date]":return"new Date("+(isNaN(t.valueOf())?r(NaN):et(nt(t)))+")";case"[object Null]":return"null";case"[object Number]":return"object"==typeof t?"new Number("+r(t.valueOf())+")":1/t==-1/0?"-0":t.toString(10);case"[object String]":return"object"==typeof t?"new String("+r(t.valueOf())+")":et(t);case"[object Undefined]":return"undefined";default:if("function"==typeof t.toString){var i=t.toString();if("[object Object]"!==i)return i}return"{"+o(t,U(t)).join(", ")+"}"}}(e,[])}),ct=l(function(e,t){if(b(e)){if(b(t))return e.concat(t);throw new TypeError(lt(t)+" is not an array")}if(_(e)){if(_(t))return e+t;throw new TypeError(lt(t)+" is not a string")}if(null!=e&&be(e["fantasy-land/concat"]))return e["fantasy-land/concat"](t);if(null!=e&&be(e.concat))return e.concat(t);throw new TypeError(lt(e)+' does not have a method named "concat" or "fantasy-land/concat"')}),ft=o(function(e){return p(J(C,0,H(function(e){return e[0].length},e)),function(){for(var t=0;t<e.length;){if(e[t][0].apply(this,arguments))return e[t][1].apply(this,arguments);t+=1}})}),pt=l(function(e,t){if(e>10)throw new Error("Constructor with greater than ten arguments");return 0===e?function(){return new t}:xe(ye(e,function(e,n,r,o,i,u,a,s,l,c){switch(arguments.length){case 1:return new t(e);case 2:return new t(e,n);case 3:return new t(e,n,r);case 4:return new t(e,n,r,o);case 5:return new t(e,n,r,o,i);case 6:return new t(e,n,r,o,i,u);case 7:return new t(e,n,r,o,i,u,a);case 8:return new t(e,n,r,o,i,u,a,s);case 9:return new t(e,n,r,o,i,u,a,s,l);case 10:return new t(e,n,r,o,i,u,a,s,l,c)}}))}),dt=o(function(e){return pt(e.length,e)}),ht=l(Qe),vt=l(function(e,t){return h(J(C,0,G("length",t)),function(){var n=arguments,r=this;return e.apply(r,k(function(e){return e.apply(r,n)},t))})}),yt=function(){function e(e,t,n,r){this.valueFn=e,this.valueAcc=t,this.keyFn=n,this.xf=r,this.inputs={}}return e.prototype["@@transducer/init"]=x.init,e.prototype["@@transducer/result"]=function(e){var t;for(t in this.inputs)if(B(t,this.inputs)&&(e=this.xf["@@transducer/step"](e,this.inputs[t]))["@@transducer/reduced"]){e=e["@@transducer/value"];break}return this.inputs=null,this.xf["@@transducer/result"](e)},e.prototype["@@transducer/step"]=function(e,t){var n=this.keyFn(t);return this.inputs[n]=this.inputs[n]||[n,this.valueAcc],this.inputs[n][1]=this.valueFn(this.inputs[n][1],t),e},e}(),mt=d(4,[],E([],d(4,[],function(e,t,n,r){return new yt(e,t,n,r)}),function(e,t,n,r){return M(function(r,o){var i=n(o);return r[i]=e(B(i,r)?r[i]:t,o),r},{},r)})),bt=mt(function(e,t){return e+1},0),gt=c(-1),Et=l(function(e,t){return null==t||t!=t?e:t}),wt=y(function(e,t,n){var r=e(t),o=e(n);return r>o?-1:r<o?1:0}),xt=l(function(e,t){for(var n=[],r=0,o=e.length;r<o;)Qe(e[r],t)||Qe(e[r],n)||(n[n.length]=e[r]),r+=1;return n}),Ot=y(function(e,t,n){for(var r=[],o=0,i=t.length;o<i;)Ye(e,t[o],n)||Ye(e,t[o],r)||r.push(t[o]),o+=1;return r}),St=l(function(e,t){var n={};for(var r in t)n[r]=t[r];return delete n[e],n}),Ct=y(function(e,t,n){var r=Array.prototype.slice.call(n,0);return r.splice(e,t),r}),kt=y(function(e,t,n){return m(i(t),e,n)}),_t=l(function e(t,n){switch(t.length){case 0:return n;case 1:return de(t[0])?Ct(t[0],1,n):St(t[0],n);default:var r=t[0],o=Array.prototype.slice.call(t,1);return null==n[r]?n:de(t[0])?kt(r,e(o,n[r]),n):pe(r,e(o,n[r]),n)}}),At=l(function(e,t){return e/t}),Ft=function(){function e(e,t){this.xf=t,this.n=e}return e.prototype["@@transducer/init"]=x.init,e.prototype["@@transducer/result"]=x.result,e.prototype["@@transducer/step"]=function(e,t){return this.n>0?(this.n-=1,e):this.xf["@@transducer/step"](e,t)},e}(),Dt=l(E(["drop"],l(function(e,t){return new Ft(e,t)}),function(e,t){return Ie(Math.max(0,e),1/0,t)})),Tt=function(){function e(e,t){this.xf=t,this.n=e,this.i=0}return e.prototype["@@transducer/init"]=x.init,e.prototype["@@transducer/result"]=x.result,e.prototype["@@transducer/step"]=function(e,t){this.i+=1;var n=0===this.n?e:this.xf["@@transducer/step"](e,t);return this.n>=0&&this.i>=this.n?w(n):n},e}(),Pt=l(E(["take"],l(function(e,t){return new Tt(e,t)}),function(e,t){return Ie(0,e<0?1/0:e,t)}));var jt=function(){function e(e,t){this.xf=t,this.pos=0,this.full=!1,this.acc=new Array(e)}return e.prototype["@@transducer/init"]=x.init,e.prototype["@@transducer/result"]=function(e){return this.acc=null,this.xf["@@transducer/result"](e)},e.prototype["@@transducer/step"]=function(e,t){return this.full&&(e=this.xf["@@transducer/step"](e,this.acc[this.pos])),this.store(t),e},e.prototype.store=function(e){this.acc[this.pos]=e,this.pos+=1,this.pos===this.acc.length&&(this.pos=0,this.full=!0)},e}(),Rt=l(E([],l(function(e,t){return new jt(e,t)}),function(e,t){return Pt(e<t.length?t.length-e:0,t)}));var Mt=function(){function e(e,t){this.f=e,this.retained=[],this.xf=t}return e.prototype["@@transducer/init"]=x.init,e.prototype["@@transducer/result"]=function(e){return this.retained=null,this.xf["@@transducer/result"](e)},e.prototype["@@transducer/step"]=function(e,t){return this.f(t)?this.retain(e,t):this.flush(e,t)},e.prototype.flush=function(e,t){return e=M(this.xf["@@transducer/step"],e,this.retained),this.retained=[],this.xf["@@transducer/step"](e,t)},e.prototype.retain=function(e,t){return this.retained.push(t),e},e}(),Nt=l(E([],l(function(e,t){return new Mt(e,t)}),function(e,t){for(var n=t.length-1;n>=0&&e(t[n]);)n-=1;return Ie(0,n+1,t)})),It=function(){function e(e,t){this.xf=t,this.pred=e,this.lastValue=void 0,this.seenFirstValue=!1}return e.prototype["@@transducer/init"]=x.init,e.prototype["@@transducer/result"]=x.result,e.prototype["@@transducer/step"]=function(e,t){var n=!1;return this.seenFirstValue?this.pred(this.lastValue,t)&&(n=!0):this.seenFirstValue=!0,this.lastValue=t,n?e:this.xf["@@transducer/step"](e,t)},e}(),Bt=l(function(e,t){return new It(e,t)}),Vt=l(function(e,t){var n=e<0?t.length+e:e;return _(t)?t.charAt(n):t[n]}),zt=Vt(-1),Kt=l(E([],Bt,function(e,t){var n=[],r=1,o=t.length;if(0!==o)for(n[0]=t[0];r<o;)e(zt(n),t[r])||(n[n.length]=t[r]),r+=1;return n})),Lt=o(E([],Bt($e),Kt($e))),Wt=function(){function e(e,t){this.xf=t,this.f=e}return e.prototype["@@transducer/init"]=x.init,e.prototype["@@transducer/result"]=x.result,e.prototype["@@transducer/step"]=function(e,t){if(this.f){if(this.f(t))return e;this.f=null}return this.xf["@@transducer/step"](e,t)},e}(),qt=l(E(["dropWhile"],l(function(e,t){return new Wt(e,t)}),function(e,t){for(var n=0,r=t.length;n<r&&e(t[n]);)n+=1;return Ie(n,1/0,t)})),Ut=l(function(e,t){return e||t}),Ht=l(function(e,t){return be(e)?function(){return e.apply(this,arguments)||t.apply(this,arguments)}:Ee(Ut)(e,t)}),Yt=o(function(e){return null!=e&&"function"==typeof e["fantasy-land/empty"]?e["fantasy-land/empty"]():null!=e&&null!=e.constructor&&"function"==typeof e.constructor["fantasy-land/empty"]?e.constructor["fantasy-land/empty"]():null!=e&&"function"==typeof e.empty?e.empty():null!=e&&null!=e.constructor&&"function"==typeof e.constructor.empty?e.constructor.empty():b(e)?[]:_(e)?"":it(e)?{}:z(e)?function(){return arguments}():void 0}),Xt=l(function(e,t){return Dt(e>=0?t.length-e:0,t)}),Gt=l(function(e,t){return $e(Xt(e.length,t),e)}),Jt=y(function(e,t,n){return $e(e(t),e(n))}),$t=y(function(e,t,n){return $e(t[e],n[e])}),Zt=l(function e(t,n){var r,o,i,u={};for(o in n)i=typeof(r=t[o]),u[o]="function"===i?r(n[o]):r&&"object"===i?e(r,n[o]):n[o];return u}),Qt=function(){function e(e,t){this.xf=t,this.f=e,this.found=!1}return e.prototype["@@transducer/init"]=x.init,e.prototype["@@transducer/result"]=function(e){return this.found||(e=this.xf["@@transducer/step"](e,void 0)),this.xf["@@transducer/result"](e)},e.prototype["@@transducer/step"]=function(e,t){return this.f(t)&&(this.found=!0,e=w(this.xf["@@transducer/step"](e,t))),e},e}(),en=l(E(["find"],l(function(e,t){return new Qt(e,t)}),function(e,t){for(var n=0,r=t.length;n<r;){if(e(t[n]))return t[n];n+=1}})),tn=function(){function e(e,t){this.xf=t,this.f=e,this.idx=-1,this.found=!1}return e.prototype["@@transducer/init"]=x.init,e.prototype["@@transducer/result"]=function(e){return this.found||(e=this.xf["@@transducer/step"](e,-1)),this.xf["@@transducer/result"](e)},e.prototype["@@transducer/step"]=function(e,t){return this.idx+=1,this.f(t)&&(this.found=!0,e=w(this.xf["@@transducer/step"](e,this.idx))),e},e}(),nn=l(E([],l(function(e,t){return new tn(e,t)}),function(e,t){for(var n=0,r=t.length;n<r;){if(e(t[n]))return n;n+=1}return-1})),rn=function(){function e(e,t){this.xf=t,this.f=e}return e.prototype["@@transducer/init"]=x.init,e.prototype["@@transducer/result"]=function(e){return this.xf["@@transducer/result"](this.xf["@@transducer/step"](e,this.last))},e.prototype["@@transducer/step"]=function(e,t){return this.f(t)&&(this.last=t),e},e}(),on=l(E([],l(function(e,t){return new rn(e,t)}),function(e,t){for(var n=t.length-1;n>=0;){if(e(t[n]))return t[n];n-=1}})),un=function(){function e(e,t){this.xf=t,this.f=e,this.idx=-1,this.lastIdx=-1}return e.prototype["@@transducer/init"]=x.init,e.prototype["@@transducer/result"]=function(e){return this.xf["@@transducer/result"](this.xf["@@transducer/step"](e,this.lastIdx))},e.prototype["@@transducer/step"]=function(e,t){return this.idx+=1,this.f(t)&&(this.lastIdx=this.idx),e},e}(),an=l(E([],l(function(e,t){return new un(e,t)}),function(e,t){for(var n=t.length-1;n>=0;){if(e(t[n]))return n;n-=1}return-1})),sn=o(Se(!0)),ln=o(function(e){return h(e.length,function(t,n){var r=Array.prototype.slice.call(arguments,0);return r[0]=n,r[1]=t,e.apply(this,r)})}),cn=l(Ne("forEach",function(e,t){for(var n=t.length,r=0;r<n;)e(t[r]),r+=1;return t})),fn=l(function(e,t){for(var n=U(t),r=0;r<n.length;){var o=n[r];e(t[o],o,t),r+=1}return t}),pn=o(function(e){for(var t={},n=0;n<e.length;)t[e[n][0]]=e[n][1],n+=1;return t}),dn=l(Ne("groupBy",mt(function(e,t){return null==e&&(e=[]),e.push(t),e},null))),hn=l(function(e,t){for(var n=[],r=0,o=t.length;r<o;){for(var i=r+1;i<o&&e(t[i-1],t[i]);)i+=1;n.push(t.slice(r,i)),r=i}return n}),vn=l(function(e,t){return e>t}),yn=l(function(e,t){return e>=t}),mn=l(B),bn=l(function(e,t){return e in t}),gn=Vt(0);function En(e){return e}var wn=o(En),xn=y(function(e,t,n){return h(Math.max(e.length,t.length,n.length),function(){return e.apply(this,arguments)?t.apply(this,arguments):n.apply(this,arguments)})}),On=c(1),Sn=mt(function(e,t){return t},null),Cn=l(function(e,t){return"function"!=typeof t.indexOf||b(t)?Ze(t,e,0):t.indexOf(e)}),kn=Ie(0,-1),_n=y(function(e,t,n){return ot(function(t){return Ye(e,t,n)},t)}),An=y(function(e,t,n){e=e<n.length&&e>=0?e:n.length;var r=Array.prototype.slice.call(n,0);return r.splice(e,0,t),r}),Fn=y(function(e,t,n){return e=e<n.length&&e>=0?e:n.length,[].concat(Array.prototype.slice.call(n,0,e),t,Array.prototype.slice.call(n,e))});function Dn(e,t,n){var r,o=typeof e;switch(o){case"string":case"number":return 0===e&&1/e==-1/0?!!n._items["-0"]||(t&&(n._items["-0"]=!0),!1):null!==n._nativeSet?t?(r=n._nativeSet.size,n._nativeSet.add(e),n._nativeSet.size===r):n._nativeSet.has(e):o in n._items?e in n._items[o]||(t&&(n._items[o][e]=!0),!1):(t&&(n._items[o]={},n._items[o][e]=!0),!1);case"boolean":if(o in n._items){var i=e?1:0;return!!n._items[o][i]||(t&&(n._items[o][i]=!0),!1)}return t&&(n._items[o]=e?[!1,!0]:[!0,!1]),!1;case"function":return null!==n._nativeSet?t?(r=n._nativeSet.size,n._nativeSet.add(e),n._nativeSet.size===r):n._nativeSet.has(e):o in n._items?!!Qe(e,n._items[o])||(t&&n._items[o].push(e),!1):(t&&(n._items[o]=[e]),!1);case"undefined":return!!n._items[o]||(t&&(n._items[o]=!0),!1);case"object":if(null===e)return!!n._items.null||(t&&(n._items.null=!0),!1);default:return(o=Object.prototype.toString.call(e))in n._items?!!Qe(e,n._items[o])||(t&&n._items[o].push(e),!1):(t&&(n._items[o]=[e]),!1)}}var Tn=function(){function e(){this._nativeSet="function"==typeof Set?new Set:null,this._items={}}return e.prototype.add=function(e){return!Dn(e,!0,this)},e.prototype.has=function(e){return Dn(e,!1,this)},e}(),Pn=l(function(e,t){for(var n,r,o=new Tn,i=[],u=0;u<t.length;)n=e(r=t[u]),o.add(n)&&i.push(r),u+=1;return i}),jn=Pn(wn),Rn=l(function(e,t){var n,r;return e.length>t.length?(n=e,r=t):(n=t,r=e),jn(ot(ln(Qe)(n),r))}),Mn=l(Ne("intersperse",function(e,t){for(var n=[],r=0,o=t.length;r<o;)r===o-1?n.push(t[r]):n.push(t[r],e),r+=1;return n}));var Nn="function"==typeof Object.assign?Object.assign:function(e){if(null==e)throw new TypeError("Cannot convert undefined or null to object");for(var t=Object(e),n=1,r=arguments.length;n<r;){var o=arguments[n];if(null!=o)for(var i in o)B(i,o)&&(t[i]=o[i]);n+=1}return t},In=l(function(e,t){var n={};return n[e]=t,n}),Bn={"@@transducer/init":Array,"@@transducer/step":function(e,t){return e.push(t),e},"@@transducer/result":En},Vn={"@@transducer/init":String,"@@transducer/step":function(e,t){return e+t},"@@transducer/result":En},zn={"@@transducer/init":Object,"@@transducer/step":function(e,t){return Nn(e,A(t)?In(t[0],t[1]):t)},"@@transducer/result":En};var Kn=y(function(e,t,n){return g(e)?M(t(e),e["@@transducer/init"](),n):M(t(function(e){if(g(e))return e;if(A(e))return Bn;if("string"==typeof e)return Vn;if("object"==typeof e)return zn;throw new Error("Cannot create transformer for "+e)}(e)),De(e,[],[],!1),n)}),Ln=o(function(e){for(var t=U(e),n=t.length,r=0,o={};r<n;){var i=t[r],u=e[i],a=B(u,o)?o[u]:o[u]=[];a[a.length]=i,r+=1}return o}),Wn=o(function(e){for(var t=U(e),n=t.length,r=0,o={};r<n;){var i=t[r];o[e[i]]=i,r+=1}return o}),qn=l(function(e,t){return h(e+1,function(){var n=arguments[e];if(null!=n&&be(n[t]))return n[t].apply(n,Array.prototype.slice.call(arguments,0,e));throw new TypeError(lt(n)+' does not have a method named "'+t+'"')})}),Un=l(function(e,t){return null!=t&&t.constructor===e||t instanceof e}),Hn=o(function(e){return null!=e&&$e(e,Yt(e))}),Yn=qn(1,"join"),Xn=o(function(e){return vt(function(){return Array.prototype.slice.call(arguments,0)},e)}),Gn=o(function(e){var t,n=[];for(t in e)n[n.length]=t;return n}),Jn=l(function(e,t){if("function"!=typeof t.lastIndexOf||b(t)){for(var n=t.length-1;n>=0;){if($e(t[n],e))return n;n-=1}return-1}return t.lastIndexOf(e)});function $n(e){return"[object Number]"===Object.prototype.toString.call(e)}var Zn=o(function(e){return null!=e&&$n(e.length)?e.length:NaN}),Qn=l(function(e,t){return function(n){return function(r){return H(function(e){return t(e,r)},n(e(r)))}}}),er=o(function(e){return Qn(Vt(e),kt(e))}),tr=o(function(e){return Qn(Y(e),ve(e))}),nr=o(function(e){return Qn(X(e),pe(e))}),rr=l(function(e,t){return e<t}),or=l(function(e,t){return e<=t}),ir=y(function(e,t,n){for(var r=0,o=n.length,i=[],u=[t];r<o;)u=e(u[0],n[r]),i[r]=u[1],r+=1;return[u[0],i]}),ur=y(function(e,t,n){for(var r=n.length-1,o=[],i=[t];r>=0;)i=e(n[r],i[0]),o[r]=i[1],r-=1;return[o,i[0]]}),ar=l(function(e,t){return M(function(n,r){return n[r]=e(t[r],r,t),n},{},U(t))}),sr=l(function(e,t){return t.match(e)||[]}),lr=l(function(e,t){return de(e)?!de(t)||t<1?NaN:(e%t+t)%t:NaN}),cr=y(function(e,t,n){return e(n)>e(t)?n:t}),fr=J(c,0),pr=o(function(e){return fr(e)/e.length}),dr=o(function(e){var t=e.length;if(0===t)return NaN;var n=2-t%2,r=(t-n)/2;return pr(Array.prototype.slice.call(e,0).sort(function(e,t){return e<t?-1:e>t?1:0}).slice(r,r+n))}),hr=l(function(e,t){var n={};return p(t.length,function(){var r=e.apply(this,arguments);return B(r,n)||(n[r]=t.apply(this,arguments)),n[r]})}),vr=hr(function(){return lt(arguments)}),yr=l(function(e,t){return Nn({},e,t)}),mr=o(function(e){return Nn.apply(null,[{}].concat(e))}),br=y(function(e,t,n){var r,o={};for(r in t)B(r,t)&&(o[r]=B(r,n)?e(r,t[r],n[r]):t[r]);for(r in n)B(r,n)&&!B(r,o)&&(o[r]=n[r]);return o}),gr=y(function e(t,n,r){return br(function(n,r,o){return it(r)&&it(o)?e(t,r,o):t(n,r,o)},n,r)}),Er=l(function(e,t){return gr(function(e,t,n){return t},e,t)}),wr=l(function(e,t){return gr(function(e,t,n){return n},e,t)}),xr=y(function(e,t,n){return gr(function(t,n,r){return e(n,r)},t,n)}),Or=y(function(e,t,n){return br(function(t,n,r){return e(n,r)},t,n)}),Sr=l(function(e,t){return t<e?t:e}),Cr=y(function(e,t,n){return e(n)<e(t)?n:t}),kr=l(function(e,t){return e%t}),_r=l(function(e,t){return e*t}),Ar=o(function(e){return-e}),Fr=l(rt(E(["any"],ee,te))),Dr=o(function(e){return h(e<0?1:e+1,function(){return Vt(e,arguments)})}),Tr=y(function(e,t,n){return e(t(n))});var Pr=o(function(e){return[e]}),jr=l(function(e,t){for(var n={},r={},o=0,i=e.length;o<i;)r[e[o]]=1,o+=1;for(var u in t)r.hasOwnProperty(u)||(n[u]=t[u]);return n}),Rr=o(function(e){var t,n=!1;return p(e.length,function(){return n?t:(n=!0,t=e.apply(this,arguments))})}),Mr=function(e){return{value:e,map:function(t){return Mr(t(e))}}},Nr=y(function(e,t,n){return e(function(e){return Mr(t(e))})(n).value}),Ir=l(function(e,t){return[e,t]});function Br(e){return l(function(t,n){return p(Math.max(0,t.length-n.length),function(){return t.apply(this,e(n,arguments))})})}var Vr=Br(f),zr=Br(ln(f)),Kr=Xn([at,st]),Lr=y(function(e,t,n){return $e(Y(e,n),t)}),Wr=y(function(e,t,n){return Et(e,Y(t,n))}),qr=y(function(e,t,n){return t.length>0&&e(Y(t,n))}),Ur=l(function(e,t){for(var n={},r=0;r<e.length;)e[r]in t&&(n[e[r]]=t[e[r]]),r+=1;return n}),Hr=l(function(e,t){for(var n={},r=0,o=e.length;r<o;){var i=e[r];n[i]=t[i],r+=1}return n}),Yr=l(function(e,t){var n={};for(var r in t)e(t[r],r,t)&&(n[r]=t[r]);return n});function Xr(){if(0===arguments.length)throw new Error("pipeK requires at least one argument");return Le.apply(this,ze(arguments))}var Gr=l(function(e,t){return f([e],t)}),Jr=J(_r,1),$r=l(function(e,t){return h(t.length,function(){for(var n=[],r=0;r<t.length;)n.push(t[r].call(this,arguments[r])),r+=1;return e.apply(this,n.concat(Array.prototype.slice.call(arguments,t.length)))})}),Zr=$r(k,[Hr,wn]),Qr=y(function(e,t,n){return $e(t,n[e])}),eo=y(function(e,t,n){return Un(e,n[t])}),to=y(function(e,t,n){return null!=n&&B(t,n)?n[t]:e}),no=y(function(e,t,n){return e(n[t])}),ro=l(function(e,t){for(var n=e.length,r=[],o=0;o<n;)r[o]=t[e[o]],o+=1;return r}),oo=l(function(e,t){if(!$n(e)||!$n(t))throw new TypeError("Both arguments to range must be numbers");for(var n=[],r=e;r<t;)n.push(r),r+=1;return n}),io=y(function(e,t,n){for(var r=n.length-1;r>=0;)t=e(n[r],t),r-=1;return t}),uo=d(4,[],function(e,t,n,r){return M(function(n,r){return e(n,r)?t(n,r):w(n)},n,r)}),ao=o(w),so=l(function(e,t){var n,r=Number(t),o=0;if(r<0||isNaN(r))throw new RangeError("n must be a non-negative number");for(n=new Array(r);o<r;)n[o]=e(o),o+=1;return n}),lo=l(function(e,t){return so(i(e),t)}),co=y(function(e,t,n){return n.replace(e,t)}),fo=y(function(e,t,n){for(var r=0,o=n.length,i=[t];r<o;)t=e(t,n[r]),i[r+1]=t,r+=1;return i}),po=l(function(e,t){return"function"==typeof t.sequence?t.sequence(e):io(function(e,t){return re(H(Gr,e),t)},e([]),t)}),ho=y(function(e,t,n){return Nr(e,i(t),n)}),vo=l(function(e,t){return Array.prototype.slice.call(t,0).sort(e)}),yo=l(function(e,t){return Array.prototype.slice.call(t,0).sort(function(t,n){var r=e(t),o=e(n);return r<o?-1:r>o?1:0})}),mo=l(function(e,t){return Array.prototype.slice.call(t,0).sort(function(t,n){for(var r=0,o=0;0===r&&o<e.length;)r=e[o](t,n),o+=1;return r})}),bo=qn(1,"split"),go=l(function(e,t){return[Ie(0,e,t),Ie(e,Zn(t),t)]}),Eo=l(function(e,t){if(e<=0)throw new Error("First argument to splitEvery must be a positive integer");for(var n=[],r=0;r<t.length;)n.push(Ie(r,r+=e,t));return n}),wo=l(function(e,t){for(var n=0,r=t.length,o=[];n<r&&!e(t[n]);)o.push(t[n]),n+=1;return[o,Array.prototype.slice.call(t,n)]}),xo=l(function(e,t){return $e(Pt(e.length,t),e)}),Oo=l(function(e,t){return Number(e)-Number(t)}),So=l(function(e,t){return ct(xt(e,t),xt(t,e))}),Co=y(function(e,t,n){return ct(Ot(e,t,n),Ot(e,n,t))}),ko=l(function(e,t){for(var n=t.length-1;n>=0&&e(t[n]);)n-=1;return Ie(n+1,1/0,t)}),_o=function(){function e(e,t){this.xf=t,this.f=e}return e.prototype["@@transducer/init"]=x.init,e.prototype["@@transducer/result"]=x.result,e.prototype["@@transducer/step"]=function(e,t){return this.f(t)?this.xf["@@transducer/step"](e,t):w(e)},e}(),Ao=l(E(["takeWhile"],l(function(e,t){return new _o(e,t)}),function(e,t){for(var n=0,r=t.length;n<r&&e(t[n]);)n+=1;return Ie(0,n,t)})),Fo=function(){function e(e,t){this.xf=t,this.f=e}return e.prototype["@@transducer/init"]=x.init,e.prototype["@@transducer/result"]=x.result,e.prototype["@@transducer/step"]=function(e,t){return this.f(t),this.xf["@@transducer/step"](e,t)},e}(),Do=l(E([],l(function(e,t){return new Fo(e,t)}),function(e,t){return e(t),t}));var To=l(function(e,t){if(n=e,"[object RegExp]"!==Object.prototype.toString.call(n))throw new TypeError("‘test’ requires a value of type RegExp as its first argument; received "+lt(e));var n;return Ae(e).test(t)}),Po=qn(0,"toLowerCase"),jo=o(function(e){var t=[];for(var n in e)B(n,e)&&(t[t.length]=[n,e[n]]);return t}),Ro=o(function(e){var t=[];for(var n in e)t[t.length]=[n,e[n]];return t}),Mo=qn(0,"toUpperCase"),No=h(4,function(e,t,n,r){return M(e("function"==typeof t?D(t):t),n,r)}),Io=o(function(e){for(var t=0,n=[];t<e.length;){for(var r=e[t],o=0;o<r.length;)void 0===n[o]&&(n[o]=[]),n[o].push(r[o]),o+=1;t+=1}return n}),Bo=y(function(e,t,n){return"function"==typeof n["fantasy-land/traverse"]?n["fantasy-land/traverse"](t,e):po(e,H(t,n))}),Vo="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff",zo=o("function"==typeof String.prototype.trim&&!Vo.trim()&&"​".trim()?function(e){return e.trim()}:function(e){var t=new RegExp("^["+Vo+"]["+Vo+"]*"),n=new RegExp("["+Vo+"]["+Vo+"]*$");return e.replace(t,"").replace(n,"")}),Ko=l(function(e,t){return p(e.length,function(){try{return e.apply(this,arguments)}catch(e){return t.apply(this,f([e],arguments))}})}),Lo=o(function(e){return function(){return e(Array.prototype.slice.call(arguments,0))}}),Wo=o(function(e){return ye(1,e)}),qo=l(function(e,t){return h(e,function(){for(var n,r=1,o=t,i=0;r<=e&&"function"==typeof o;)n=r===e?arguments.length:i+o.length,o=o.apply(this,Array.prototype.slice.call(arguments,i,n)),r+=1,i=n;return o})}),Uo=l(function(e,t){for(var n=e(t),r=[];n&&n.length;)r[r.length]=n[0],n=e(n[1]);return r}),Ho=l(Ke(jn,f)),Yo=l(function(e,t){for(var n,r=0,o=t.length,i=[];r<o;)Ye(e,n=t[r],i)||(i[i.length]=n),r+=1;return i}),Xo=y(function(e,t,n){return Yo(e,f(t,n))}),Go=y(function(e,t,n){return e(n)?n:t(n)}),Jo=ke(En),$o=y(function(e,t,n){for(var r=n;!e(r);)r=t(r);return r}),Zo=o(function(e){var t,n=[];for(t in e)n[n.length]=e[t];return n}),Qo=function(e){return{value:e,"fantasy-land/map":function(){return this}}},ei=l(function(e,t){return e(Qo)(t).value}),ti=y(function(e,t,n){return e(n)?t(n):n}),ni=l(function(e,t){for(var n in e)if(B(n,e)&&!e[n](t[n]))return!1;return!0}),ri=l(function(e,t){return ni(H($e,e),t)}),oi=l(function(e,t){return st(ln(Qe)(e),t)}),ii=l(function(e,t){for(var n,r=0,o=e.length,i=t.length,u=[];r<o;){for(n=0;n<i;)u[u.length]=[e[r],t[n]],n+=1;r+=1}return u}),ui=l(function(e,t){for(var n=[],r=0,o=Math.min(e.length,t.length);r<o;)n[r]=[e[r],t[r]],r+=1;return n}),ai=l(function(e,t){for(var n=0,r=Math.min(e.length,t.length),o={};n<r;)o[e[n]]=t[n],n+=1;return o}),si=y(function(e,t,n){for(var r=[],o=0,i=Math.min(t.length,n.length);o<i;)r[o]=e(t[o],n[o]),o+=1;return r});n.d(t,"F",function(){return u}),n.d(t,"T",function(){return a}),n.d(t,"__",function(){return s}),n.d(t,"add",function(){return c}),n.d(t,"addIndex",function(){return v}),n.d(t,"adjust",function(){return m}),n.d(t,"all",function(){return S}),n.d(t,"allPass",function(){return $}),n.d(t,"always",function(){return i}),n.d(t,"and",function(){return Z}),n.d(t,"any",function(){return te}),n.d(t,"anyPass",function(){return ne}),n.d(t,"ap",function(){return re}),n.d(t,"aperture",function(){return ie}),n.d(t,"append",function(){return ue}),n.d(t,"apply",function(){return ae}),n.d(t,"applySpec",function(){return le}),n.d(t,"applyTo",function(){return ce}),n.d(t,"ascend",function(){return fe}),n.d(t,"assoc",function(){return pe}),n.d(t,"assocPath",function(){return ve}),n.d(t,"binary",function(){return me}),n.d(t,"bind",function(){return T}),n.d(t,"both",function(){return we}),n.d(t,"call",function(){return Oe}),n.d(t,"chain",function(){return ke}),n.d(t,"clamp",function(){return _e}),n.d(t,"clone",function(){return Te}),n.d(t,"comparator",function(){return Pe}),n.d(t,"complement",function(){return Re}),n.d(t,"compose",function(){return Ke}),n.d(t,"composeK",function(){return Le}),n.d(t,"composeP",function(){return Ue}),n.d(t,"concat",function(){return ct}),n.d(t,"cond",function(){return ft}),n.d(t,"construct",function(){return dt}),n.d(t,"constructN",function(){return pt}),n.d(t,"contains",function(){return ht}),n.d(t,"converge",function(){return vt}),n.d(t,"countBy",function(){return bt}),n.d(t,"curry",function(){return xe}),n.d(t,"curryN",function(){return h}),n.d(t,"dec",function(){return gt}),n.d(t,"defaultTo",function(){return Et}),n.d(t,"descend",function(){return wt}),n.d(t,"difference",function(){return xt}),n.d(t,"differenceWith",function(){return Ot}),n.d(t,"dissoc",function(){return St}),n.d(t,"dissocPath",function(){return _t}),n.d(t,"divide",function(){return At}),n.d(t,"drop",function(){return Dt}),n.d(t,"dropLast",function(){return Rt}),n.d(t,"dropLastWhile",function(){return Nt}),n.d(t,"dropRepeats",function(){return Lt}),n.d(t,"dropRepeatsWith",function(){return Kt}),n.d(t,"dropWhile",function(){return qt}),n.d(t,"either",function(){return Ht}),n.d(t,"empty",function(){return Yt}),n.d(t,"endsWith",function(){return Gt}),n.d(t,"eqBy",function(){return Jt}),n.d(t,"eqProps",function(){return $t}),n.d(t,"equals",function(){return $e}),n.d(t,"evolve",function(){return Zt}),n.d(t,"filter",function(){return at}),n.d(t,"find",function(){return en}),n.d(t,"findIndex",function(){return nn}),n.d(t,"findLast",function(){return on}),n.d(t,"findLastIndex",function(){return an}),n.d(t,"flatten",function(){return sn}),n.d(t,"flip",function(){return ln}),n.d(t,"forEach",function(){return cn}),n.d(t,"forEachObjIndexed",function(){return fn}),n.d(t,"fromPairs",function(){return pn}),n.d(t,"groupBy",function(){return dn}),n.d(t,"groupWith",function(){return hn}),n.d(t,"gt",function(){return vn}),n.d(t,"gte",function(){return yn}),n.d(t,"has",function(){return mn}),n.d(t,"hasIn",function(){return bn}),n.d(t,"head",function(){return gn}),n.d(t,"identical",function(){return Xe}),n.d(t,"identity",function(){return wn}),n.d(t,"ifElse",function(){return xn}),n.d(t,"inc",function(){return On}),n.d(t,"indexBy",function(){return Sn}),n.d(t,"indexOf",function(){return Cn}),n.d(t,"init",function(){return kn}),n.d(t,"innerJoin",function(){return _n}),n.d(t,"insert",function(){return An}),n.d(t,"insertAll",function(){return Fn}),n.d(t,"intersection",function(){return Rn}),n.d(t,"intersperse",function(){return Mn}),n.d(t,"into",function(){return Kn}),n.d(t,"invert",function(){return Ln}),n.d(t,"invertObj",function(){return Wn}),n.d(t,"invoker",function(){return qn}),n.d(t,"is",function(){return Un}),n.d(t,"isEmpty",function(){return Hn}),n.d(t,"isNil",function(){return he}),n.d(t,"join",function(){return Yn}),n.d(t,"juxt",function(){return Xn}),n.d(t,"keys",function(){return U}),n.d(t,"keysIn",function(){return Gn}),n.d(t,"last",function(){return zt}),n.d(t,"lastIndexOf",function(){return Jn}),n.d(t,"length",function(){return Zn}),n.d(t,"lens",function(){return Qn}),n.d(t,"lensIndex",function(){return er}),n.d(t,"lensPath",function(){return tr}),n.d(t,"lensProp",function(){return nr}),n.d(t,"lift",function(){return Ee}),n.d(t,"liftN",function(){return ge}),n.d(t,"lt",function(){return rr}),n.d(t,"lte",function(){return or}),n.d(t,"map",function(){return H}),n.d(t,"mapAccum",function(){return ir}),n.d(t,"mapAccumRight",function(){return ur}),n.d(t,"mapObjIndexed",function(){return ar}),n.d(t,"match",function(){return sr}),n.d(t,"mathMod",function(){return lr}),n.d(t,"max",function(){return C}),n.d(t,"maxBy",function(){return cr}),n.d(t,"mean",function(){return pr}),n.d(t,"median",function(){return dr}),n.d(t,"memoize",function(){return vr}),n.d(t,"memoizeWith",function(){return hr}),n.d(t,"merge",function(){return yr}),n.d(t,"mergeAll",function(){return mr}),n.d(t,"mergeDeepLeft",function(){return Er}),n.d(t,"mergeDeepRight",function(){return wr}),n.d(t,"mergeDeepWith",function(){return xr}),n.d(t,"mergeDeepWithKey",function(){return gr}),n.d(t,"mergeWith",function(){return Or}),n.d(t,"mergeWithKey",function(){return br}),n.d(t,"min",function(){return Sr}),n.d(t,"minBy",function(){return Cr}),n.d(t,"modulo",function(){return kr}),n.d(t,"multiply",function(){return _r}),n.d(t,"nAry",function(){return ye}),n.d(t,"negate",function(){return Ar}),n.d(t,"none",function(){return Fr}),n.d(t,"not",function(){return je}),n.d(t,"nth",function(){return Vt}),n.d(t,"nthArg",function(){return Dr}),n.d(t,"o",function(){return Tr}),n.d(t,"objOf",function(){return In}),n.d(t,"of",function(){return Pr}),n.d(t,"omit",function(){return jr}),n.d(t,"once",function(){return Rr}),n.d(t,"or",function(){return Ut}),n.d(t,"over",function(){return Nr}),n.d(t,"pair",function(){return Ir}),n.d(t,"partial",function(){return Vr}),n.d(t,"partialRight",function(){return zr}),n.d(t,"partition",function(){return Kr}),n.d(t,"path",function(){return Y}),n.d(t,"pathEq",function(){return Lr}),n.d(t,"pathOr",function(){return Wr}),n.d(t,"pathSatisfies",function(){return qr}),n.d(t,"pick",function(){return Ur}),n.d(t,"pickAll",function(){return Hr}),n.d(t,"pickBy",function(){return Yr}),n.d(t,"pipe",function(){return Ve}),n.d(t,"pipeK",function(){return Xr}),n.d(t,"pipeP",function(){return qe}),n.d(t,"pluck",function(){return G}),n.d(t,"prepend",function(){return Gr}),n.d(t,"product",function(){return Jr}),n.d(t,"project",function(){return Zr}),n.d(t,"prop",function(){return X}),n.d(t,"propEq",function(){return Qr}),n.d(t,"propIs",function(){return eo}),n.d(t,"propOr",function(){return to}),n.d(t,"propSatisfies",function(){return no}),n.d(t,"props",function(){return ro}),n.d(t,"range",function(){return oo}),n.d(t,"reduce",function(){return J}),n.d(t,"reduceBy",function(){return mt}),n.d(t,"reduceRight",function(){return io}),n.d(t,"reduceWhile",function(){return uo}),n.d(t,"reduced",function(){return ao}),n.d(t,"reject",function(){return st}),n.d(t,"remove",function(){return Ct}),n.d(t,"repeat",function(){return lo}),n.d(t,"replace",function(){return co}),n.d(t,"reverse",function(){return ze}),n.d(t,"scan",function(){return fo}),n.d(t,"sequence",function(){return po}),n.d(t,"set",function(){return ho}),n.d(t,"slice",function(){return Ie}),n.d(t,"sort",function(){return vo}),n.d(t,"sortBy",function(){return yo}),n.d(t,"sortWith",function(){return mo}),n.d(t,"split",function(){return bo}),n.d(t,"splitAt",function(){return go}),n.d(t,"splitEvery",function(){return Eo}),n.d(t,"splitWhen",function(){return wo}),n.d(t,"startsWith",function(){return xo}),n.d(t,"subtract",function(){return Oo}),n.d(t,"sum",function(){return fr}),n.d(t,"symmetricDifference",function(){return So}),n.d(t,"symmetricDifferenceWith",function(){return Co}),n.d(t,"tail",function(){return Be}),n.d(t,"take",function(){return Pt}),n.d(t,"takeLast",function(){return Xt}),n.d(t,"takeLastWhile",function(){return ko}),n.d(t,"takeWhile",function(){return Ao}),n.d(t,"tap",function(){return Do}),n.d(t,"test",function(){return To}),n.d(t,"times",function(){return so}),n.d(t,"toLower",function(){return Po}),n.d(t,"toPairs",function(){return jo}),n.d(t,"toPairsIn",function(){return Ro}),n.d(t,"toString",function(){return lt}),n.d(t,"toUpper",function(){return Mo}),n.d(t,"transduce",function(){return No}),n.d(t,"transpose",function(){return Io}),n.d(t,"traverse",function(){return Bo}),n.d(t,"trim",function(){return zo}),n.d(t,"tryCatch",function(){return Ko}),n.d(t,"type",function(){return Fe}),n.d(t,"unapply",function(){return Lo}),n.d(t,"unary",function(){return Wo}),n.d(t,"uncurryN",function(){return qo}),n.d(t,"unfold",function(){return Uo}),n.d(t,"union",function(){return Ho}),n.d(t,"unionWith",function(){return Xo}),n.d(t,"uniq",function(){return jn}),n.d(t,"uniqBy",function(){return Pn}),n.d(t,"uniqWith",function(){return Yo}),n.d(t,"unless",function(){return Go}),n.d(t,"unnest",function(){return Jo}),n.d(t,"until",function(){return $o}),n.d(t,"update",function(){return kt}),n.d(t,"useWith",function(){return $r}),n.d(t,"values",function(){return se}),n.d(t,"valuesIn",function(){return Zo}),n.d(t,"view",function(){return ei}),n.d(t,"when",function(){return ti}),n.d(t,"where",function(){return ni}),n.d(t,"whereEq",function(){return ri}),n.d(t,"without",function(){return oi}),n.d(t,"xprod",function(){return ii}),n.d(t,"zip",function(){return ui}),n.d(t,"zipObj",function(){return ai}),n.d(t,"zipWith",function(){return si})},function(e,t){e.exports=window.ReactDOM},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(3));var o={scroll:{row2:function(e){var t={};return e.n_fixed_columns&&(t.position="relative"),t},cell:function(e,t){var n={};return e.n_fixed_columns&&t<e.n_fixed_columns&&(n.position="absolute",n.left=r.sum(r.pluck("width",r.slice(0,t,e.columns))),n.top="auto",n.overflowY="hidden",n.height=35,n.width=e.columns[t].width,n.maxWidth=e.columns[t].width,n.minWidth=e.columns[t].width),e.n_fixed_rows&&(n.width=e.columns[t].width,n.maxWidth=e.columns[t].width,n.minWidth=e.columns[t].width),n},borderStyle:function(e){var t=e.i,n=e.idx,o=e.columns,i=e.selected_cell,u=e.dataframe,a=e.collapsable,s=e.expanded_rows,l=e.active_cell,c=e.row_selectable,f=e.style_as_list_view,p=[];o.forEach(function(e,t){e.hidden||p.push(t)});var d=l[0]===n&&l[1]===t,h="var(--accent)",v="var(--border)",y=function(e,t){return"inset "+t+"px 0px 0px 0px "+e},m=function(e,t){return"inset -"+t+"px 0px 0px 0px "+e},b=function(e,t){return"inset 0px "+t+"px 0px 0px "+e},g=function(e,t){return"inset 0px -"+t+"px 0px 0px "+e},E=r.sort(function(e,t){return e-t}),w=E(r.uniq(r.pluck(0,i))),x=E(r.uniq(r.pluck(1,i))),O=!!d||t===r.head(x)&&!c&&r.contains(n,w),S=!!d||n===r.head(w)&&r.contains(t,x),C=!!d||t===r.last(x)&&r.contains(n,w),k=!!d||n===r.last(w)&&r.contains(t,x),_=t===r.last(p),A=c?-1===t:t===r.head(p),F=0===n,D=n===u.length-1,T=a&&r.contains(n,s)&&t===p[0],P=a&&r.contains(n,s),j=r.contains(t,x),R=r.contains(n,w),M=[O||T?y(h,d?2:1):null,S?b(h,d?2:1):null,k?g(h,d?2:1):null,C?m(h,d?2:1):null,j&&F?b(h,1):null,R&&A?y(h,1):null,f&&-1!==t?null:y(v,1),b(v,1),D||P?g(v,1):null,_?m(v,1):null].filter(r.complement(r.not));return{boxShadow:""+r.sort(function(e){return r.contains(h,e)?-1:1},M).join(", ")}},row:function(e,t){var n={};return e.n_fixed_rows&&t<e.n_fixed_rows&&(n.position="absolute",n.top=35*t,n.left=0,n.overflowX="hidden"),n},containerDiv:function(e){var t={};if(e.n_fixed_columns){t.overflowX="scroll",t.width=e.width;t.marginLeft=r.sum(r.pluck("width",r.slice(0,e.n_fixed_columns,e.columns)))+-1}return e.n_fixed_rows&&(t.overflowY="scroll",t.height=e.height,t.marginTop=35*e.n_fixed_rows),t},table:function(){return{}}}};t.default=o},function(e,t,n){"use strict";
/*!
 * Font Awesome Free 5.0.13 by @fontawesome - https://fontawesome.com
 * License - https://fontawesome.com/license (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)
 */var r=function(){},o={},i={},u=null,a={mark:r,measure:r};try{"undefined"!=typeof window&&(o=window),"undefined"!=typeof document&&(i=document),"undefined"!=typeof MutationObserver&&(u=MutationObserver),"undefined"!=typeof performance&&(a=performance)}catch(e){}var s=(o.navigator||{}).userAgent,l=void 0===s?"":s,c=o,f=i,p=u,d=a,h=!!c.document,v=!!f.documentElement&&!!f.head&&"function"==typeof f.addEventListener&&"function"==typeof f.createElement,y=~l.indexOf("MSIE")||~l.indexOf("Trident/"),m=16,b="data-fa-i2svg",g="data-fa-pseudo-element",E="fontawesome-i2svg",w=function(){try{return!0}catch(e){return!1}}(),x=[1,2,3,4,5,6,7,8,9,10],O=x.concat([11,12,13,14,15,16,17,18,19,20]),S=["class","data-prefix","data-icon","data-fa-transform","data-fa-mask"],C=["xs","sm","lg","fw","ul","li","border","pull-left","pull-right","spin","pulse","rotate-90","rotate-180","rotate-270","flip-horizontal","flip-vertical","stack","stack-1x","stack-2x","inverse","layers","layers-text","layers-counter"].concat(x.map(function(e){return e+"x"})).concat(O.map(function(e){return"w-"+e})),k=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},_=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),A=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},F=function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)},D=c.FontAwesomeConfig||{},T=Object.keys(D),P=A({familyPrefix:"fa",replacementClass:"svg-inline--fa",autoReplaceSvg:!0,autoAddCss:!0,autoA11y:!0,searchPseudoElements:!1,observeMutations:!0,keepOriginalSource:!0,measurePerformance:!1,showMissingIcons:!0},D);P.autoReplaceSvg||(P.observeMutations=!1);var j=A({},P);function R(e){var t=(arguments.length>1&&void 0!==arguments[1]?arguments[1]:{}).asNewDefault,n=void 0!==t&&t,r=Object.keys(j),o=n?function(e){return~r.indexOf(e)&&!~T.indexOf(e)}:function(e){return~r.indexOf(e)};Object.keys(e).forEach(function(t){o(t)&&(j[t]=e[t])})}c.FontAwesomeConfig=j;var M=c||{};M.___FONT_AWESOME___||(M.___FONT_AWESOME___={}),M.___FONT_AWESOME___.styles||(M.___FONT_AWESOME___.styles={}),M.___FONT_AWESOME___.hooks||(M.___FONT_AWESOME___.hooks={}),M.___FONT_AWESOME___.shims||(M.___FONT_AWESOME___.shims=[]);var N=M.___FONT_AWESOME___,I=[],B=!1;v&&((B=(f.documentElement.doScroll?/^loaded|^c/:/^loaded|^i|^c/).test(f.readyState))||f.addEventListener("DOMContentLoaded",function e(){f.removeEventListener("DOMContentLoaded",e),B=1,I.map(function(e){return e()})}));var V=function(e){v&&(B?setTimeout(e,0):I.push(e))},z=m,K={size:16,x:0,y:0,rotate:0,flipX:!1,flipY:!1};function L(e){if(e&&v){var t=f.createElement("style");t.setAttribute("type","text/css"),t.innerHTML=e;for(var n=f.head.childNodes,r=null,o=n.length-1;o>-1;o--){var i=n[o],u=(i.tagName||"").toUpperCase();["STYLE","LINK"].indexOf(u)>-1&&(r=i)}return f.head.insertBefore(t,r),e}}var W=0;function q(){return++W}function U(e){for(var t=[],n=(e||[]).length>>>0;n--;)t[n]=e[n];return t}function H(e){return e.classList?U(e.classList):(e.getAttribute("class")||"").split(" ").filter(function(e){return e})}function Y(e,t){var n,r=t.split("-"),o=r[0],i=r.slice(1).join("-");return o!==e||""===i||(n=i,~C.indexOf(n))?null:i}function X(e){return(""+e).replace(/&/g,"&amp;").replace(/"/g,"&quot;").replace(/'/g,"&#39;").replace(/</g,"&lt;").replace(/>/g,"&gt;")}function G(e){return Object.keys(e||{}).reduce(function(t,n){return t+(n+": ")+e[n]+";"},"")}function J(e){return e.size!==K.size||e.x!==K.x||e.y!==K.y||e.rotate!==K.rotate||e.flipX||e.flipY}function $(e){var t=e.transform,n=e.containerWidth,r=e.iconWidth;return{outer:{transform:"translate("+n/2+" 256)"},inner:{transform:"translate("+32*t.x+", "+32*t.y+") "+" "+("scale("+t.size/16*(t.flipX?-1:1)+", "+t.size/16*(t.flipY?-1:1)+") ")+" "+("rotate("+t.rotate+" 0 0)")},path:{transform:"translate("+r/2*-1+" -256)"}}}var Z={x:0,y:0,width:"100%",height:"100%"},Q=function(e){var t=e.children,n=e.attributes,r=e.main,o=e.mask,i=e.transform,u=r.width,a=r.icon,s=o.width,l=o.icon,c=$({transform:i,containerWidth:s,iconWidth:u}),f={tag:"rect",attributes:A({},Z,{fill:"white"})},p={tag:"g",attributes:A({},c.inner),children:[{tag:"path",attributes:A({},a.attributes,c.path,{fill:"black"})}]},d={tag:"g",attributes:A({},c.outer),children:[p]},h="mask-"+q(),v="clip-"+q(),y={tag:"defs",children:[{tag:"clipPath",attributes:{id:v},children:[l]},{tag:"mask",attributes:A({},Z,{id:h,maskUnits:"userSpaceOnUse",maskContentUnits:"userSpaceOnUse"}),children:[f,d]}]};return t.push(y,{tag:"rect",attributes:A({fill:"currentColor","clip-path":"url(#"+v+")",mask:"url(#"+h+")"},Z)}),{children:t,attributes:n}},ee=function(e){var t=e.children,n=e.attributes,r=e.main,o=e.transform,i=G(e.styles);if(i.length>0&&(n.style=i),J(o)){var u=$({transform:o,containerWidth:r.width,iconWidth:r.width});t.push({tag:"g",attributes:A({},u.outer),children:[{tag:"g",attributes:A({},u.inner),children:[{tag:r.icon.tag,children:r.icon.children,attributes:A({},r.icon.attributes,u.path)}]}]})}else t.push(r.icon);return{children:t,attributes:n}},te=function(e){var t=e.children,n=e.main,r=e.mask,o=e.attributes,i=e.styles,u=e.transform;if(J(u)&&n.found&&!r.found){var a={x:n.width/n.height/2,y:.5};o.style=G(A({},i,{"transform-origin":a.x+u.x/16+"em "+(a.y+u.y/16)+"em"}))}return[{tag:"svg",attributes:o,children:t}]},ne=function(e){var t=e.prefix,n=e.iconName,r=e.children,o=e.attributes,i=e.symbol,u=!0===i?t+"-"+j.familyPrefix+"-"+n:i;return[{tag:"svg",attributes:{style:"display: none;"},children:[{tag:"symbol",attributes:A({},o,{id:u}),children:r}]}]};function re(e){var t=e.icons,n=t.main,r=t.mask,o=e.prefix,i=e.iconName,u=e.transform,a=e.symbol,s=e.title,l=e.extra,c=e.watchable,f=void 0!==c&&c,p=r.found?r:n,d=p.width,h=p.height,v="fa-w-"+Math.ceil(d/h*16),y=[j.replacementClass,i?j.familyPrefix+"-"+i:"",v].concat(l.classes).join(" "),m={children:[],attributes:A({},l.attributes,{"data-prefix":o,"data-icon":i,class:y,role:"img",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 "+d+" "+h})};f&&(m.attributes[b]=""),s&&m.children.push({tag:"title",attributes:{id:m.attributes["aria-labelledby"]||"title-"+q()},children:[s]});var g=A({},m,{prefix:o,iconName:i,main:n,mask:r,transform:u,symbol:a,styles:l.styles}),E=r.found&&n.found?Q(g):ee(g),w=E.children,x=E.attributes;return g.children=w,g.attributes=x,a?ne(g):te(g)}function oe(e){var t=e.content,n=e.width,r=e.height,o=e.transform,i=e.title,u=e.extra,a=e.watchable,s=void 0!==a&&a,l=A({},u.attributes,i?{title:i}:{},{class:u.classes.join(" ")});s&&(l[b]="");var c=A({},u.styles);J(o)&&(c.transform=function(e){var t=e.transform,n=e.width,r=void 0===n?m:n,o=e.height,i=void 0===o?m:o,u=e.startCentered,a=void 0!==u&&u,s="";return s+=a&&y?"translate("+(t.x/z-r/2)+"em, "+(t.y/z-i/2)+"em) ":a?"translate(calc(-50% + "+t.x/z+"em), calc(-50% + "+t.y/z+"em)) ":"translate("+t.x/z+"em, "+t.y/z+"em) ",s+="scale("+t.size/z*(t.flipX?-1:1)+", "+t.size/z*(t.flipY?-1:1)+") ",s+="rotate("+t.rotate+"deg) "}({transform:o,startCentered:!0,width:n,height:r}),c["-webkit-transform"]=c.transform);var f=G(c);f.length>0&&(l.style=f);var p=[];return p.push({tag:"span",attributes:l,children:[t]}),i&&p.push({tag:"span",attributes:{class:"sr-only"},children:[i]}),p}var ie=function(){},ue=j.measurePerformance&&d&&d.mark&&d.measure?d:{mark:ie,measure:ie},ae='FA "5.0.13"',se=function(e){ue.mark(ae+" "+e+" ends"),ue.measure(ae+" "+e,ae+" "+e+" begins",ae+" "+e+" ends")},le={begin:function(e){return ue.mark(ae+" "+e+" begins"),function(){return se(e)}},end:se},ce=function(e,t,n,r){var o,i,u,a=Object.keys(e),s=a.length,l=void 0!==r?function(e,t){return function(n,r,o,i){return e.call(t,n,r,o,i)}}(t,r):t;for(void 0===n?(o=1,u=e[a[0]]):(o=0,u=n);o<s;o++)u=l(u,e[i=a[o]],i,e);return u},fe=N.styles,pe=N.shims,de={},he={},ve={},ye=function(){var e=function(e){return ce(fe,function(t,n,r){return t[r]=ce(n,e,{}),t},{})};de=e(function(e,t,n){return e[t[3]]=n,e}),he=e(function(e,t,n){var r=t[2];return e[n]=n,r.forEach(function(t){e[t]=n}),e});var t="far"in fe;ve=ce(pe,function(e,n){var r=n[0],o=n[1],i=n[2];return"far"!==o||t||(o="fas"),e[r]={prefix:o,iconName:i},e},{})};ye();var me=N.styles,be=function(){return{prefix:null,iconName:null,rest:[]}};function ge(e){return e.reduce(function(e,t){var n=Y(j.familyPrefix,t);if(me[t])e.prefix=t;else if(n){var r="fa"===e.prefix?ve[n]||{prefix:null,iconName:null}:{};e.iconName=r.iconName||n,e.prefix=r.prefix||e.prefix}else t!==j.replacementClass&&0!==t.indexOf("fa-w-")&&e.rest.push(t);return e},be())}function Ee(e,t,n){if(e&&e[t]&&e[t][n])return{prefix:t,iconName:n,icon:e[t][n]}}function we(e){var t=e.tag,n=e.attributes,r=void 0===n?{}:n,o=e.children,i=void 0===o?[]:o;return"string"==typeof e?X(e):"<"+t+" "+function(e){return Object.keys(e||{}).reduce(function(t,n){return t+(n+'="')+X(e[n])+'" '},"").trim()}(r)+">"+i.map(we).join("")+"</"+t+">"}var xe=function(){};function Oe(e){return"string"==typeof(e.getAttribute?e.getAttribute(b):null)}var Se={replace:function(e){var t=e[0],n=e[1].map(function(e){return we(e)}).join("\n");if(t.parentNode&&t.outerHTML)t.outerHTML=n+(j.keepOriginalSource&&"svg"!==t.tagName.toLowerCase()?"\x3c!-- "+t.outerHTML+" --\x3e":"");else if(t.parentNode){var r=document.createElement("span");t.parentNode.replaceChild(r,t),r.outerHTML=n}},nest:function(e){var t=e[0],n=e[1];if(~H(t).indexOf(j.replacementClass))return Se.replace(e);var r=new RegExp(j.familyPrefix+"-.*");delete n[0].attributes.style;var o=n[0].attributes.class.split(" ").reduce(function(e,t){return t===j.replacementClass||t.match(r)?e.toSvg.push(t):e.toNode.push(t),e},{toNode:[],toSvg:[]});n[0].attributes.class=o.toSvg.join(" ");var i=n.map(function(e){return we(e)}).join("\n");t.setAttribute("class",o.toNode.join(" ")),t.setAttribute(b,""),t.innerHTML=i}};function Ce(e,t){var n="function"==typeof t?t:xe;0===e.length?n():(c.requestAnimationFrame||function(e){return e()})(function(){var t=!0===j.autoReplaceSvg?Se.replace:Se[j.autoReplaceSvg]||Se.replace,r=le.begin("mutate");e.map(t),r(),n()})}var ke=!1;var _e=null;var Ae=function(e){var t=e.getAttribute("style"),n=[];return t&&(n=t.split(";").reduce(function(e,t){var n=t.split(":"),r=n[0],o=n.slice(1);return r&&o.length>0&&(e[r]=o.join(":").trim()),e},{})),n};var Fe=function(e){var t,n,r=e.getAttribute("data-prefix"),o=e.getAttribute("data-icon"),i=void 0!==e.innerText?e.innerText.trim():"",u=ge(H(e));return r&&o&&(u.prefix=r,u.iconName=o),u.prefix&&i.length>1?u.iconName=(t=u.prefix,n=e.innerText,he[t][n]):u.prefix&&1===i.length&&(u.iconName=function(e,t){return de[e][t]}(u.prefix,function(e){for(var t="",n=0;n<e.length;n++)t+=("000"+e.charCodeAt(n).toString(16)).slice(-4);return t}(e.innerText))),u},De=function(e){var t={size:16,x:0,y:0,flipX:!1,flipY:!1,rotate:0};return e?e.toLowerCase().split(" ").reduce(function(e,t){var n=t.toLowerCase().split("-"),r=n[0],o=n.slice(1).join("-");if(r&&"h"===o)return e.flipX=!0,e;if(r&&"v"===o)return e.flipY=!0,e;if(o=parseFloat(o),isNaN(o))return e;switch(r){case"grow":e.size=e.size+o;break;case"shrink":e.size=e.size-o;break;case"left":e.x=e.x-o;break;case"right":e.x=e.x+o;break;case"up":e.y=e.y-o;break;case"down":e.y=e.y+o;break;case"rotate":e.rotate=e.rotate+o}return e},t):t},Te=function(e){return De(e.getAttribute("data-fa-transform"))},Pe=function(e){var t=e.getAttribute("data-fa-symbol");return null!==t&&(""===t||t)},je=function(e){var t=U(e.attributes).reduce(function(e,t){return"class"!==e.name&&"style"!==e.name&&(e[t.name]=t.value),e},{}),n=e.getAttribute("title");return j.autoA11y&&(n?t["aria-labelledby"]=j.replacementClass+"-title-"+q():t["aria-hidden"]="true"),t},Re=function(e){var t=e.getAttribute("data-fa-mask");return t?ge(t.split(" ").map(function(e){return e.trim()})):be()};function Me(e){this.name="MissingIcon",this.message=e||"Icon unavailable",this.stack=(new Error).stack}Me.prototype=Object.create(Error.prototype),Me.prototype.constructor=Me;var Ne={fill:"currentColor"},Ie={attributeType:"XML",repeatCount:"indefinite",dur:"2s"},Be={tag:"path",attributes:A({},Ne,{d:"M156.5,447.7l-12.6,29.5c-18.7-9.5-35.9-21.2-51.5-34.9l22.7-22.7C127.6,430.5,141.5,440,156.5,447.7z M40.6,272H8.5 c1.4,21.2,5.4,41.7,11.7,61.1L50,321.2C45.1,305.5,41.8,289,40.6,272z M40.6,240c1.4-18.8,5.2-37,11.1-54.1l-29.5-12.6 C14.7,194.3,10,216.7,8.5,240H40.6z M64.3,156.5c7.8-14.9,17.2-28.8,28.1-41.5L69.7,92.3c-13.7,15.6-25.5,32.8-34.9,51.5 L64.3,156.5z M397,419.6c-13.9,12-29.4,22.3-46.1,30.4l11.9,29.8c20.7-9.9,39.8-22.6,56.9-37.6L397,419.6z M115,92.4 c13.9-12,29.4-22.3,46.1-30.4l-11.9-29.8c-20.7,9.9-39.8,22.6-56.8,37.6L115,92.4z M447.7,355.5c-7.8,14.9-17.2,28.8-28.1,41.5 l22.7,22.7c13.7-15.6,25.5-32.9,34.9-51.5L447.7,355.5z M471.4,272c-1.4,18.8-5.2,37-11.1,54.1l29.5,12.6 c7.5-21.1,12.2-43.5,13.6-66.8H471.4z M321.2,462c-15.7,5-32.2,8.2-49.2,9.4v32.1c21.2-1.4,41.7-5.4,61.1-11.7L321.2,462z M240,471.4c-18.8-1.4-37-5.2-54.1-11.1l-12.6,29.5c21.1,7.5,43.5,12.2,66.8,13.6V471.4z M462,190.8c5,15.7,8.2,32.2,9.4,49.2h32.1 c-1.4-21.2-5.4-41.7-11.7-61.1L462,190.8z M92.4,397c-12-13.9-22.3-29.4-30.4-46.1l-29.8,11.9c9.9,20.7,22.6,39.8,37.6,56.9 L92.4,397z M272,40.6c18.8,1.4,36.9,5.2,54.1,11.1l12.6-29.5C317.7,14.7,295.3,10,272,8.5V40.6z M190.8,50 c15.7-5,32.2-8.2,49.2-9.4V8.5c-21.2,1.4-41.7,5.4-61.1,11.7L190.8,50z M442.3,92.3L419.6,115c12,13.9,22.3,29.4,30.5,46.1 l29.8-11.9C470,128.5,457.3,109.4,442.3,92.3z M397,92.4l22.7-22.7c-15.6-13.7-32.8-25.5-51.5-34.9l-12.6,29.5 C370.4,72.1,384.4,81.5,397,92.4z"})},Ve=A({},Ie,{attributeName:"opacity"}),ze={tag:"g",children:[Be,{tag:"circle",attributes:A({},Ne,{cx:"256",cy:"364",r:"28"}),children:[{tag:"animate",attributes:A({},Ie,{attributeName:"r",values:"28;14;28;28;14;28;"})},{tag:"animate",attributes:A({},Ve,{values:"1;0;1;1;0;1;"})}]},{tag:"path",attributes:A({},Ne,{opacity:"1",d:"M263.7,312h-16c-6.6,0-12-5.4-12-12c0-71,77.4-63.9,77.4-107.8c0-20-17.8-40.2-57.4-40.2c-29.1,0-44.3,9.6-59.2,28.7 c-3.9,5-11.1,6-16.2,2.4l-13.1-9.2c-5.6-3.9-6.9-11.8-2.6-17.2c21.2-27.2,46.4-44.7,91.2-44.7c52.3,0,97.4,29.8,97.4,80.2 c0,67.6-77.4,63.5-77.4,107.8C275.7,306.6,270.3,312,263.7,312z"}),children:[{tag:"animate",attributes:A({},Ve,{values:"1;0;0;0;0;1;"})}]},{tag:"path",attributes:A({},Ne,{opacity:"0",d:"M232.5,134.5l7,168c0.3,6.4,5.6,11.5,12,11.5h9c6.4,0,11.7-5.1,12-11.5l7-168c0.3-6.8-5.2-12.5-12-12.5h-23 C237.7,122,232.2,127.7,232.5,134.5z"}),children:[{tag:"animate",attributes:A({},Ve,{values:"0;0;1;1;0;0;"})}]}]},Ke=N.styles,Le="fa-layers-text",We=/Font Awesome 5 (Solid|Regular|Light|Brands)/,qe={Solid:"fas",Regular:"far",Light:"fal",Brands:"fab"};function Ue(e,t){var n={found:!1,width:512,height:512,icon:ze};if(e&&t&&Ke[t]&&Ke[t][e]){var r=Ke[t][e];n={found:!0,width:r[0],height:r[1],icon:{tag:"path",attributes:{fill:"currentColor",d:r.slice(4)[0]}}}}else if(e&&t&&!j.showMissingIcons)throw new Me("Icon is missing for prefix "+t+" with icon name "+e);return n}function He(e){var t=function(e){var t=Fe(e),n=t.iconName,r=t.prefix,o=t.rest,i=Ae(e),u=Te(e),a=Pe(e),s=je(e),l=Re(e);return{iconName:n,title:e.getAttribute("title"),prefix:r,transform:u,symbol:a,mask:l,extra:{classes:o,styles:i,attributes:s}}}(e);return~t.extra.classes.indexOf(Le)?function(e,t){var n=t.title,r=t.transform,o=t.extra,i=null,u=null;if(y){var a=parseInt(getComputedStyle(e).fontSize,10),s=e.getBoundingClientRect();i=s.width/a,u=s.height/a}return j.autoA11y&&!n&&(o.attributes["aria-hidden"]="true"),[e,oe({content:e.innerHTML,width:i,height:u,transform:r,title:n,extra:o,watchable:!0})]}(e,t):function(e,t){var n=t.iconName,r=t.title,o=t.prefix,i=t.transform,u=t.symbol,a=t.mask,s=t.extra;return[e,re({icons:{main:Ue(n,o),mask:Ue(a.iconName,a.prefix)},prefix:o,iconName:n,transform:i,symbol:u,mask:a,title:r,extra:s,watchable:!0})]}(e,t)}function Ye(e){"function"==typeof e.remove?e.remove():e&&e.parentNode&&e.parentNode.removeChild(e)}function Xe(e){if(v){var t=le.begin("searchPseudoElements");ke=!0,function(){U(e.querySelectorAll("*")).forEach(function(e){[":before",":after"].forEach(function(t){var n=c.getComputedStyle(e,t),r=n.getPropertyValue("font-family").match(We),o=U(e.children).filter(function(e){return e.getAttribute(g)===t})[0];if(o&&(o.nextSibling&&o.nextSibling.textContent.indexOf(g)>-1&&Ye(o.nextSibling),Ye(o),o=null),r&&!o){var i=n.getPropertyValue("content"),u=f.createElement("i");u.setAttribute("class",""+qe[r[1]]),u.setAttribute(g,t),u.innerText=3===i.length?i.substr(1,1):i,":before"===t?e.insertBefore(u,e.firstChild):e.appendChild(u)}})})}(),ke=!1,t()}}function Ge(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;if(v){var n=f.documentElement.classList,r=function(e){return n.add(E+"-"+e)},o=function(e){return n.remove(E+"-"+e)},i=Object.keys(Ke),u=["."+Le+":not(["+b+"])"].concat(i.map(function(e){return"."+e+":not(["+b+"])"})).join(", ");if(0!==u.length){var a=U(e.querySelectorAll(u));if(a.length>0){r("pending"),o("complete");var s=le.begin("onTree"),l=a.reduce(function(e,t){try{var n=He(t);n&&e.push(n)}catch(e){w||e instanceof Me&&console.error(e)}return e},[]);s(),Ce(l,function(){r("active"),r("complete"),o("pending"),"function"==typeof t&&t()})}}}}function Je(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=He(e);n&&Ce([n],t)}var $e=function(){var e="svg-inline--fa",t=j.familyPrefix,n=j.replacementClass,r='svg:not(:root).svg-inline--fa {\n  overflow: visible; }\n\n.svg-inline--fa {\n  display: inline-block;\n  font-size: inherit;\n  height: 1em;\n  overflow: visible;\n  vertical-align: -.125em; }\n  .svg-inline--fa.fa-lg {\n    vertical-align: -.225em; }\n  .svg-inline--fa.fa-w-1 {\n    width: 0.0625em; }\n  .svg-inline--fa.fa-w-2 {\n    width: 0.125em; }\n  .svg-inline--fa.fa-w-3 {\n    width: 0.1875em; }\n  .svg-inline--fa.fa-w-4 {\n    width: 0.25em; }\n  .svg-inline--fa.fa-w-5 {\n    width: 0.3125em; }\n  .svg-inline--fa.fa-w-6 {\n    width: 0.375em; }\n  .svg-inline--fa.fa-w-7 {\n    width: 0.4375em; }\n  .svg-inline--fa.fa-w-8 {\n    width: 0.5em; }\n  .svg-inline--fa.fa-w-9 {\n    width: 0.5625em; }\n  .svg-inline--fa.fa-w-10 {\n    width: 0.625em; }\n  .svg-inline--fa.fa-w-11 {\n    width: 0.6875em; }\n  .svg-inline--fa.fa-w-12 {\n    width: 0.75em; }\n  .svg-inline--fa.fa-w-13 {\n    width: 0.8125em; }\n  .svg-inline--fa.fa-w-14 {\n    width: 0.875em; }\n  .svg-inline--fa.fa-w-15 {\n    width: 0.9375em; }\n  .svg-inline--fa.fa-w-16 {\n    width: 1em; }\n  .svg-inline--fa.fa-w-17 {\n    width: 1.0625em; }\n  .svg-inline--fa.fa-w-18 {\n    width: 1.125em; }\n  .svg-inline--fa.fa-w-19 {\n    width: 1.1875em; }\n  .svg-inline--fa.fa-w-20 {\n    width: 1.25em; }\n  .svg-inline--fa.fa-pull-left {\n    margin-right: .3em;\n    width: auto; }\n  .svg-inline--fa.fa-pull-right {\n    margin-left: .3em;\n    width: auto; }\n  .svg-inline--fa.fa-border {\n    height: 1.5em; }\n  .svg-inline--fa.fa-li {\n    width: 2em; }\n  .svg-inline--fa.fa-fw {\n    width: 1.25em; }\n\n.fa-layers svg.svg-inline--fa {\n  bottom: 0;\n  left: 0;\n  margin: auto;\n  position: absolute;\n  right: 0;\n  top: 0; }\n\n.fa-layers {\n  display: inline-block;\n  height: 1em;\n  position: relative;\n  text-align: center;\n  vertical-align: -.125em;\n  width: 1em; }\n  .fa-layers svg.svg-inline--fa {\n    -webkit-transform-origin: center center;\n            transform-origin: center center; }\n\n.fa-layers-text, .fa-layers-counter {\n  display: inline-block;\n  position: absolute;\n  text-align: center; }\n\n.fa-layers-text {\n  left: 50%;\n  top: 50%;\n  -webkit-transform: translate(-50%, -50%);\n          transform: translate(-50%, -50%);\n  -webkit-transform-origin: center center;\n          transform-origin: center center; }\n\n.fa-layers-counter {\n  background-color: #ff253a;\n  border-radius: 1em;\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n  color: #fff;\n  height: 1.5em;\n  line-height: 1;\n  max-width: 5em;\n  min-width: 1.5em;\n  overflow: hidden;\n  padding: .25em;\n  right: 0;\n  text-overflow: ellipsis;\n  top: 0;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: top right;\n          transform-origin: top right; }\n\n.fa-layers-bottom-right {\n  bottom: 0;\n  right: 0;\n  top: auto;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: bottom right;\n          transform-origin: bottom right; }\n\n.fa-layers-bottom-left {\n  bottom: 0;\n  left: 0;\n  right: auto;\n  top: auto;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: bottom left;\n          transform-origin: bottom left; }\n\n.fa-layers-top-right {\n  right: 0;\n  top: 0;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: top right;\n          transform-origin: top right; }\n\n.fa-layers-top-left {\n  left: 0;\n  right: auto;\n  top: 0;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: top left;\n          transform-origin: top left; }\n\n.fa-lg {\n  font-size: 1.33333em;\n  line-height: 0.75em;\n  vertical-align: -.0667em; }\n\n.fa-xs {\n  font-size: .75em; }\n\n.fa-sm {\n  font-size: .875em; }\n\n.fa-1x {\n  font-size: 1em; }\n\n.fa-2x {\n  font-size: 2em; }\n\n.fa-3x {\n  font-size: 3em; }\n\n.fa-4x {\n  font-size: 4em; }\n\n.fa-5x {\n  font-size: 5em; }\n\n.fa-6x {\n  font-size: 6em; }\n\n.fa-7x {\n  font-size: 7em; }\n\n.fa-8x {\n  font-size: 8em; }\n\n.fa-9x {\n  font-size: 9em; }\n\n.fa-10x {\n  font-size: 10em; }\n\n.fa-fw {\n  text-align: center;\n  width: 1.25em; }\n\n.fa-ul {\n  list-style-type: none;\n  margin-left: 2.5em;\n  padding-left: 0; }\n  .fa-ul > li {\n    position: relative; }\n\n.fa-li {\n  left: -2em;\n  position: absolute;\n  text-align: center;\n  width: 2em;\n  line-height: inherit; }\n\n.fa-border {\n  border: solid 0.08em #eee;\n  border-radius: .1em;\n  padding: .2em .25em .15em; }\n\n.fa-pull-left {\n  float: left; }\n\n.fa-pull-right {\n  float: right; }\n\n.fa.fa-pull-left,\n.fas.fa-pull-left,\n.far.fa-pull-left,\n.fal.fa-pull-left,\n.fab.fa-pull-left {\n  margin-right: .3em; }\n\n.fa.fa-pull-right,\n.fas.fa-pull-right,\n.far.fa-pull-right,\n.fal.fa-pull-right,\n.fab.fa-pull-right {\n  margin-left: .3em; }\n\n.fa-spin {\n  -webkit-animation: fa-spin 2s infinite linear;\n          animation: fa-spin 2s infinite linear; }\n\n.fa-pulse {\n  -webkit-animation: fa-spin 1s infinite steps(8);\n          animation: fa-spin 1s infinite steps(8); }\n\n@-webkit-keyframes fa-spin {\n  0% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg); }\n  100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg); } }\n\n@keyframes fa-spin {\n  0% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg); }\n  100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg); } }\n\n.fa-rotate-90 {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=1)";\n  -webkit-transform: rotate(90deg);\n          transform: rotate(90deg); }\n\n.fa-rotate-180 {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=2)";\n  -webkit-transform: rotate(180deg);\n          transform: rotate(180deg); }\n\n.fa-rotate-270 {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=3)";\n  -webkit-transform: rotate(270deg);\n          transform: rotate(270deg); }\n\n.fa-flip-horizontal {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=0, mirror=1)";\n  -webkit-transform: scale(-1, 1);\n          transform: scale(-1, 1); }\n\n.fa-flip-vertical {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)";\n  -webkit-transform: scale(1, -1);\n          transform: scale(1, -1); }\n\n.fa-flip-horizontal.fa-flip-vertical {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)";\n  -webkit-transform: scale(-1, -1);\n          transform: scale(-1, -1); }\n\n:root .fa-rotate-90,\n:root .fa-rotate-180,\n:root .fa-rotate-270,\n:root .fa-flip-horizontal,\n:root .fa-flip-vertical {\n  -webkit-filter: none;\n          filter: none; }\n\n.fa-stack {\n  display: inline-block;\n  height: 2em;\n  position: relative;\n  width: 2em; }\n\n.fa-stack-1x,\n.fa-stack-2x {\n  bottom: 0;\n  left: 0;\n  margin: auto;\n  position: absolute;\n  right: 0;\n  top: 0; }\n\n.svg-inline--fa.fa-stack-1x {\n  height: 1em;\n  width: 1em; }\n\n.svg-inline--fa.fa-stack-2x {\n  height: 2em;\n  width: 2em; }\n\n.fa-inverse {\n  color: #fff; }\n\n.sr-only {\n  border: 0;\n  clip: rect(0, 0, 0, 0);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px; }\n\n.sr-only-focusable:active, .sr-only-focusable:focus {\n  clip: auto;\n  height: auto;\n  margin: 0;\n  overflow: visible;\n  position: static;\n  width: auto; }\n';if("fa"!==t||n!==e){var o=new RegExp("\\.fa\\-","g"),i=new RegExp("\\."+e,"g");r=r.replace(o,"."+t+"-").replace(i,"."+n)}return r};function Ze(e){return{found:!0,width:e[0],height:e[1],icon:{tag:"path",attributes:{fill:"currentColor",d:e.slice(4)[0]}}}}var Qe=!1;function et(){j.autoAddCss&&(Qe||L($e()),Qe=!0)}function tt(e,t){return Object.defineProperty(e,"abstract",{get:t}),Object.defineProperty(e,"html",{get:function(){return e.abstract.map(function(e){return we(e)})}}),Object.defineProperty(e,"node",{get:function(){if(v){var t=f.createElement("div");return t.innerHTML=e.html,t.children}}}),e}function nt(e){var t=e.prefix,n=void 0===t?"fa":t,r=e.iconName;if(r)return Ee(ot.definitions,n,r)||Ee(N.styles,n,r)}var rt,ot=new(function(){function e(){k(this,e),this.definitions={}}return _(e,[{key:"add",value:function(){for(var e=this,t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];var o=n.reduce(this._pullDefinitions,{});Object.keys(o).forEach(function(t){e.definitions[t]=A({},e.definitions[t]||{},o[t]),function e(t,n){var r=Object.keys(n).reduce(function(e,t){var r=n[t];return r.icon?e[r.iconName]=r.icon:e[t]=r,e},{});"function"==typeof N.hooks.addPack?N.hooks.addPack(t,r):N.styles[t]=A({},N.styles[t]||{},r),"fas"===t&&e("fa",n)}(t,o[t])})}},{key:"reset",value:function(){this.definitions={}}},{key:"_pullDefinitions",value:function(e,t){var n=t.prefix&&t.iconName&&t.icon?{0:t}:t;return Object.keys(n).map(function(t){var r=n[t],o=r.prefix,i=r.iconName,u=r.icon;e[o]||(e[o]={}),e[o][i]=u}),e}}]),e}()),it=(rt=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.transform,r=void 0===n?K:n,o=t.symbol,i=void 0!==o&&o,u=t.mask,a=void 0===u?null:u,s=t.title,l=void 0===s?null:s,c=t.classes,f=void 0===c?[]:c,p=t.attributes,d=void 0===p?{}:p,h=t.styles,v=void 0===h?{}:h;if(e){var y=e.prefix,m=e.iconName,b=e.icon;return tt(A({type:"icon"},e),function(){return et(),j.autoA11y&&(l?d["aria-labelledby"]=j.replacementClass+"-title-"+q():d["aria-hidden"]="true"),re({icons:{main:Ze(b),mask:a?Ze(a.icon):{found:!1,width:null,height:null,icon:{}}},prefix:y,iconName:m,transform:A({},K,r),symbol:i,title:l,extra:{attributes:d,styles:v,classes:f}})})}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=(e||{}).icon?e:nt(e||{}),r=t.mask;return r&&(r=(r||{}).icon?r:nt(r||{})),rt(n,A({},t,{mask:r}))}),ut={noAuto:function(){var e;R({autoReplaceSvg:e=!1,observeMutations:e}),_e&&_e.disconnect()},dom:{i2svg:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(v){et();var t=e.node,n=void 0===t?f:t,r=e.callback,o=void 0===r?function(){}:r;j.searchPseudoElements&&Xe(n),Ge(n,o)}},css:$e,insertCss:function(){L($e())}},library:ot,parse:{transform:function(e){return De(e)}},findIconDefinition:nt,icon:it,text:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.transform,r=void 0===n?K:n,o=t.title,i=void 0===o?null:o,u=t.classes,a=void 0===u?[]:u,s=t.attributes,l=void 0===s?{}:s,c=t.styles,f=void 0===c?{}:c;return tt({type:"text",content:e},function(){return et(),oe({content:e,transform:A({},K,r),title:i,extra:{attributes:l,styles:f,classes:[j.familyPrefix+"-layers-text"].concat(F(a))}})})},layer:function(e){return tt({type:"layer"},function(){et();var t=[];return e(function(e){Array.isArray(e)?e.map(function(e){t=t.concat(e.abstract)}):t=t.concat(e.abstract)}),[{tag:"span",attributes:{class:j.familyPrefix+"-layers"},children:t}]})}},at=function(){v&&j.autoReplaceSvg&&ut.dom.i2svg({node:f})};Object.defineProperty(ut,"config",{get:function(){return j},set:function(e){R(e)}}),v&&function(e){try{e()}catch(e){if(!w)throw e}}(function(){h&&(c.FontAwesome||(c.FontAwesome=ut),V(function(){Object.keys(N.styles).length>0&&at(),j.observeMutations&&"function"==typeof MutationObserver&&function(e){if(p){var t=e.treeCallback,n=e.nodeCallback,r=e.pseudoElementsCallback;_e=new p(function(e){ke||U(e).forEach(function(e){if("childList"===e.type&&e.addedNodes.length>0&&!Oe(e.addedNodes[0])&&(j.searchPseudoElements&&r(e.target),t(e.target)),"attributes"===e.type&&e.target.parentNode&&j.searchPseudoElements&&r(e.target.parentNode),"attributes"===e.type&&Oe(e.target)&&~S.indexOf(e.attributeName))if("class"===e.attributeName){var o=ge(H(e.target)),i=o.prefix,u=o.iconName;i&&e.target.setAttribute("data-prefix",i),u&&e.target.setAttribute("data-icon",u)}else n(e.target)})}),v&&_e.observe(f.getElementsByTagName("body")[0],{childList:!0,attributes:!0,characterData:!0,subtree:!0})}}({treeCallback:Ge,nodeCallback:Je,pseudoElementsCallback:Xe})})),N.hooks=A({},N.hooks,{addPack:function(e,t){N.styles[e]=A({},N.styles[e]||{},t),ye(),at()},addShims:function(e){var t;(t=N.shims).push.apply(t,F(e)),ye(),at()}})});ut.config;t.a=ut},function(e,t,n){var r,o,i={},u=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),a=function(e){var t={};return function(e){if("function"==typeof e)return e();if(void 0===t[e]){var n=function(e){return document.querySelector(e)}.call(this,e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}}(),s=null,l=0,c=[],f=n(15);function p(e,t){for(var n=0;n<e.length;n++){var r=e[n],o=i[r.id];if(o){o.refs++;for(var u=0;u<o.parts.length;u++)o.parts[u](r.parts[u]);for(;u<r.parts.length;u++)o.parts.push(b(r.parts[u],t))}else{var a=[];for(u=0;u<r.parts.length;u++)a.push(b(r.parts[u],t));i[r.id]={id:r.id,refs:1,parts:a}}}}function d(e,t){for(var n=[],r={},o=0;o<e.length;o++){var i=e[o],u=t.base?i[0]+t.base:i[0],a={css:i[1],media:i[2],sourceMap:i[3]};r[u]?r[u].parts.push(a):n.push(r[u]={id:u,parts:[a]})}return n}function h(e,t){var n=a(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=c[c.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),c.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=a(e.insertInto+" "+e.insertAt.before);n.insertBefore(t,o)}}function v(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=c.indexOf(e);t>=0&&c.splice(t,1)}function y(e){var t=document.createElement("style");return void 0===e.attrs.type&&(e.attrs.type="text/css"),m(t,e.attrs),h(e,t),t}function m(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function b(e,t){var n,r,o,i;if(t.transform&&e.css){if(!(i=t.transform(e.css)))return function(){};e.css=i}if(t.singleton){var u=l++;n=s||(s=y(t)),r=w.bind(null,n,u,!1),o=w.bind(null,n,u,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",m(t,e.attrs),h(e,t),t}(t),r=function(e,t,n){var r=n.css,o=n.sourceMap,i=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||i)&&(r=f(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var u=new Blob([r],{type:"text/css"}),a=e.href;e.href=URL.createObjectURL(u),a&&URL.revokeObjectURL(a)}.bind(null,n,t),o=function(){v(n),n.href&&URL.revokeObjectURL(n.href)}):(n=y(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){v(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=u()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=d(e,t);return p(n,t),function(e){for(var r=[],o=0;o<n.length;o++){var u=n[o];(a=i[u.id]).refs--,r.push(a)}e&&p(d(e,t),t);for(o=0;o<r.length;o++){var a;if(0===(a=r[o]).refs){for(var s=0;s<a.parts.length;s++)a.parts[s]();delete i[a.id]}}}};var g,E=(g=[],function(e,t){return g[e]=t,g.filter(Boolean).join("\n")});function w(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=E(t,o);else{var i=document.createTextNode(o),u=e.childNodes;u[t]&&e.removeChild(u[t]),u.length?e.insertBefore(i,u[t]):e.appendChild(i)}}},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=(u=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(u))))+" */"),i=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[n].concat(i).concat([o]).join("\n")}var u;return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(r[i]=!0)}for(o=0;o<e.length;o++){var u=e[o];"number"==typeof u[0]&&r[u[0]]||(n&&!u[2]?u[2]=n:n&&(u[2]="("+u[2]+") and ("+n+")"),t.push(u))}},t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.colIsEditable=function(e,t){return!(!e||r.has("editable",t)&&!t.editable)};var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(3))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(1),u=s(i),a=s(n(0));function s(e){return e&&e.__esModule?e:{default:e}}var l={position:"absolute",top:0,left:0,visibility:"hidden",height:0,overflow:"scroll",whiteSpace:"pre"},c=["extraWidth","injectStyles","inputClassName","inputRef","inputStyle","minWidth","onAutosize","placeholderIsMinWidth"],f=function(e,t){t.style.fontSize=e.fontSize,t.style.fontFamily=e.fontFamily,t.style.fontWeight=e.fontWeight,t.style.fontStyle=e.fontStyle,t.style.letterSpacing=e.letterSpacing,t.style.textTransform=e.textTransform},p=!("undefined"==typeof window||!window.navigator)&&/MSIE |Trident\/|Edge\//.test(window.navigator.userAgent),d=function(){return p?"_"+Math.random().toString(36).substr(2,12):void 0},h=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.inputRef=function(e){n.input=e,"function"==typeof n.props.inputRef&&n.props.inputRef(e)},n.placeHolderSizerRef=function(e){n.placeHolderSizer=e},n.sizerRef=function(e){n.sizer=e},n.state={inputWidth:e.minWidth,inputId:e.id||d()},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.Component),o(t,[{key:"componentDidMount",value:function(){this.mounted=!0,this.copyInputStyles(),this.updateInputWidth()}},{key:"componentWillReceiveProps",value:function(e){var t=e.id;t!==this.props.id&&this.setState({inputId:t||d()})}},{key:"componentDidUpdate",value:function(e,t){t.inputWidth!==this.state.inputWidth&&"function"==typeof this.props.onAutosize&&this.props.onAutosize(this.state.inputWidth),this.updateInputWidth()}},{key:"componentWillUnmount",value:function(){this.mounted=!1}},{key:"copyInputStyles",value:function(){if(this.mounted&&window.getComputedStyle){var e=this.input&&window.getComputedStyle(this.input);e&&(f(e,this.sizer),this.placeHolderSizer&&f(e,this.placeHolderSizer))}}},{key:"updateInputWidth",value:function(){if(this.mounted&&this.sizer&&void 0!==this.sizer.scrollWidth){var e=void 0;e=this.props.placeholder&&(!this.props.value||this.props.value&&this.props.placeholderIsMinWidth)?Math.max(this.sizer.scrollWidth,this.placeHolderSizer.scrollWidth)+2:this.sizer.scrollWidth+2,(e+="number"===this.props.type&&void 0===this.props.extraWidth?16:parseInt(this.props.extraWidth)||0)<this.props.minWidth&&(e=this.props.minWidth),e!==this.state.inputWidth&&this.setState({inputWidth:e})}}},{key:"getInput",value:function(){return this.input}},{key:"focus",value:function(){this.input.focus()}},{key:"blur",value:function(){this.input.blur()}},{key:"select",value:function(){this.input.select()}},{key:"renderStyles",value:function(){var e=this.props.injectStyles;return p&&e?u.default.createElement("style",{dangerouslySetInnerHTML:{__html:"input#"+this.state.inputId+"::-ms-clear {display: none;}"}}):null}},{key:"render",value:function(){var e=[this.props.defaultValue,this.props.value,""].reduce(function(e,t){return null!==e&&void 0!==e?e:t}),t=r({},this.props.style);t.display||(t.display="inline-block");var n=r({boxSizing:"content-box",width:this.state.inputWidth+"px"},this.props.inputStyle),o=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(this.props,[]);return function(e){c.forEach(function(t){return delete e[t]})}(o),o.className=this.props.inputClassName,o.id=this.state.inputId,o.style=n,u.default.createElement("div",{className:this.props.className,style:t},this.renderStyles(),u.default.createElement("input",r({},o,{ref:this.inputRef})),u.default.createElement("div",{ref:this.sizerRef,style:l},e),this.props.placeholder?u.default.createElement("div",{ref:this.placeHolderSizerRef,style:l},this.props.placeholder):null)}}]),t}();h.propTypes={className:a.default.string,defaultValue:a.default.any,extraWidth:a.default.oneOfType([a.default.number,a.default.string]),id:a.default.string,injectStyles:a.default.bool,inputClassName:a.default.string,inputRef:a.default.func,inputStyle:a.default.object,minWidth:a.default.oneOfType([a.default.number,a.default.string]),onAutosize:a.default.func,onChange:a.default.func,placeholder:a.default.string,placeholderIsMinWidth:a.default.bool,style:a.default.object,value:a.default.any},h.defaultProps={minWidth:1,injectStyles:!0},t.default=h},function(e,t,n){(e.exports=n(8)(!1)).push([e.i,".dash-spreadsheet .Select,\n.dash-spreadsheet .Select-control {\n    border: none;\n    cursor: pointer;\n    height: 26px;\n    border: none;\n}\n\n.dash-spreadsheet .Select:hover,\n.dash-spreadsheet .Select-control:hover {\n    border: none;\n    box-shadow: none;\n    cursor: pointer;\n}\n\n.dash-spreadsheet .Select-menu-outer {\n    z-index: 100;\n}\n\n.dash-spreadsheet .Select-arrow {\n    border-top-color: var(--faded-dropdown);\n    border-left-color: transparent;\n    border-right-color: transparent;\n    border-bottom-color: transparent;\n}\n\n.dash-spreadsheet .Select-control:hover .Select-arrow {\n    border-top-color: var(--accent);\n    border-left-color: transparent;\n    border-right-color: transparent;\n    border-bottom-color: transparent;\n}\n\n.dash-spreadsheet .is-open > .Select-control .Select-arrow {\n    border-bottom-color: var(--background-color-8-react-select);\n    border-left-color: transparent;\n    border-right-color: transparent;\n    border-top-color: transparent;\n}\n\n.dash-spreadsheet .Select--multi .Select-value,\n.dash-spreadsheet .Select--multi a.Select-value-label {\n    color: var(--color-8-react-select);\n}\n\n.dash-spreadsheet .Select {\n    border-radius: 0;\n}\n\n.dash-spreadsheet .Select.is-disabled > .Select-control {\n    border: none;\n}\n\n.dash-spreadsheet .Select--multi .Select-value-icon:hover,\n.dash-spreadsheet .Select--multi .Select-value-icon:focus {\n    font-weight: bold;\n}\n\n.dash-spreadsheet .Select.is-disabled .Select-control {\n    cursor: not-allowed;\n}\n\n.dash-spreadsheet .Select-menu-outer {\n    background-color: white;\n    border: none;\n    border-bottom: thin var(--border) solid;\n    border-radius: 0;\n    border-top: none;\n}\n\n.dash-spreadsheet .Select-option {\n    background-color: inherit;\n    color: var(--accent);\n}\n\n.dash-spreadsheet .Select-option:hover {\n    font-weight: bold;\n    color: var(--accent);\n    background-color: var(--hover);\n}\n\n.dash-spreadsheet .Select.is-focused:not(.is-open) > .Select-control {\n    border: none;\n    -webkit-box-shadow: none;\n    box-shadow: none;\n    background: #fff;\n}\n\n.dash-spreadsheet .Select-option.is-focused {\n    background-color: white;\n    color: var(--accent);\n    font-weight: bold;\n}\n\n.dash-spreadsheet .Select-clear {\n    color: transparent;\n}\n.Select:hover .Select-clear {\n    color: var(--accent);\n}\n\n.dash-spreadsheet .Select-control {\n    padding-left: 2px;\n}\n\n.dash-spreadsheet .cell--selected .Select-control {\n    background-color: var(--selected-background);\n    border-radius: 0;\n}\n",""])},function(e,t,n){var r=n(11);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(7)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(8)(!1)).push([e.i,".dash-spreadsheet {\n    box-sizing: border-box;\n}\n.dash-spreadsheet *,\n.dash-spreadsheet *:before,\n.dash-spreadsheet *:after {\n    box-sizing: inherit;\n}\n\n.dash-spreadsheet textarea {\n    white-space: pre;\n}\n\n.dash-spreadsheet table {\n    border-collapse: collapse;\n    table-layout: fixed;\n    font-size: 1rem;\n\n    font-family: monospace;\n    --accent: hotpink;\n    --border: lightgrey;\n    --text-color: rgb(60, 60, 60);\n    --hover: rgb(253, 253, 253);\n    --background-color-ellipses: rgb(253, 253, 253);\n    --faded-text: rgb(250, 250, 250);\n    --faded-text-header: rgb(180, 180, 180);\n    --selected-background: rgba(255, 65, 54, 0.2);\n    --faded-dropdown: rgb(240, 240, 240);\n    --selected-row: #fff0ff;\n}\n\n/* focus happens after copying to clipboard */\n.dash-spreadsheet table:focus {\n    outline: none;\n}\n\n.dash-spreadsheet thead {\n    display: table-row-group;\n}\n\n.elip {\n    text-align: center;\n    width: 100%;\n    background-color: var(--background-color-ellipses);\n}\n\n.dash-spreadsheet td,\n.dash-spreadsheet th {\n    padding-left: 2px;\n    padding-right: 2px;\n    padding-bottom: 2px;\n    padding-top: 2px;\n    white-space: nowrap;\n    overflow-x: hidden;\n    text-overflow: ellipsis;\n\n    height: 30px;\n    line-height: 30px;\n\n    text-align: right;\n}\n\n.dash-spreadsheet th {\n    box-shadow: inset 1px 0px 0px 0px var(--border),\n        inset 0px 1px 0px 0px var(--border);\n}\n\n.dash-spreadsheet :not(.cell--selected) tr:hover,\ntr:hover input :not(.cell--selected) {\n    background-color: var(--hover);\n}\n\n.dash-spreadsheet th {\n    background-color: rgb(250, 250, 250);\n}\n\n.expanded-row--empty-cell {\n    box-shadow: none;\n    background-color: transparent;\n}\n\n.expanded-row {\n    text-align: center;\n}\n\n.dash-spreadsheet input:not([type=radio]):not([type=checkbox]) {\n    padding: 0px;\n    margin: 0px;\n    height: calc(100% - 1px);\n    width: calc(100% - 1px); /* to account for box-shadow */\n    line-height: 30px;\n    border: none;\n    font-size: 1rem;\n    font-family: inherit;\n    text-align: right;\n    box-sizing: border-box;\n    color: var(--text-color);\n    background-color: transparent; /* so as to not overlay the box shadow */\n}\n\n.dash-spreadsheet input.unfocused {\n    color: transparent;\n    text-shadow: 0 0 0 var(--text-color);\n    cursor: default;\n}\n\n.dash-spreadsheet input.unfocused:focus {\n    outline: none;\n}\n\n.numeric {\n    font-family: monospace;\n}\n\n.toggle-row {\n    border: none;\n    box-shadow: none;\n    width: 10px;\n    padding-left: 10px;\n    padding-right: 10px;\n    cursor: pointer;\n    color: var(--faded-text);\n}\n\n.toggle-row--expanded {\n    color: var(--accent);\n}\n\n.dash-spreadsheet tr:hover .toggle-row {\n    color: var(--accent);\n}\n\n.dash-spreadsheet td {\n    position: relative;\n}\n\n.cell--bottom-last {\n    box-shadow: inset 1px 0px 0px 0px var(--border),\n        inset 0px 1px 0px 0px var(--border),\n        inset 0px -1px 0px 0px var(--border);\n}\n\n.cell--right-last {\n    box-shadow: inset 1px 0px 0px 0px var(--border),\n        inset 0px 1px 0px 0px var(--border),\n        inset -1px 0px 0px 0px var(--border);\n}\n\n.cell--right-last.cell--bottom-last {\n    box-shadow: inset 1px 0px 0px 0px var(--border),\n        inset 0px 1px 0px 0px var(--border),\n        inset -1px 0px 0px 0px var(--border),\n        inset 0px -1px 0px 0px var(--border);\n}\n\n.cell--selected {\n    background-color: var(--selected-background);\n}\n\n.cell--uneditable,\n.cell--uneditable input {\n    cursor: not-allowed;\n}\n\n.expanded-row {\n    box-shadow: inset 2px 0px 0px 0px var(--accent),\n        inset -1px 0px 0px 0px var(--border);\n    /* inset 0px 1px 0px 0px var(--border); */\n}\n\n.selected-square {\n    position: absolute;\n    width: 2px;\n    height: 2px;\n    background-color: var(--accent);\n}\n.selected-square-bottom-right {\n    top: -1px;\n    left: -1px;\n}\n\n.filter {\n    cursor: pointer;\n    float: left;\n    color: var(--faded-text-header);\n    font-size: 20px;\n}\nth:hover .filter {\n    color: var(--accent);\n}\n.filter:hover {\n    text-decoration: underline;\n}\n\n.dash-spreadsheet .selected-row {\n    background-color: var(--selected-row);\n}\n",""])},function(e,t,n){var r=n(13);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(7)(r,o);r.locals&&(e.exports=r.locals)},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var o,i=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?e:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(e,t,n){(e.exports=n(8)(!1)).push([e.i,"/**\n * React Select\n * ============\n * Created by Jed Watson and Joss Mackison for KeystoneJS, http://www.keystonejs.com/\n * https://twitter.com/jedwatson https://twitter.com/jossmackison https://twitter.com/keystonejs\n * MIT License: https://github.com/JedWatson/react-select\n*/\n.Select {\n  position: relative;\n}\n.Select input::-webkit-contacts-auto-fill-button,\n.Select input::-webkit-credentials-auto-fill-button {\n  display: none !important;\n}\n.Select input::-ms-clear {\n  display: none !important;\n}\n.Select input::-ms-reveal {\n  display: none !important;\n}\n.Select,\n.Select div,\n.Select input,\n.Select span {\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n}\n.Select.is-disabled .Select-arrow-zone {\n  cursor: default;\n  pointer-events: none;\n  opacity: 0.35;\n}\n.Select.is-disabled > .Select-control {\n  background-color: #f9f9f9;\n}\n.Select.is-disabled > .Select-control:hover {\n  box-shadow: none;\n}\n.Select.is-open > .Select-control {\n  border-bottom-right-radius: 0;\n  border-bottom-left-radius: 0;\n  background: #fff;\n  border-color: #b3b3b3 #ccc #d9d9d9;\n}\n.Select.is-open > .Select-control .Select-arrow {\n  top: -2px;\n  border-color: transparent transparent #999;\n  border-width: 0 5px 5px;\n}\n.Select.is-searchable.is-open > .Select-control {\n  cursor: text;\n}\n.Select.is-searchable.is-focused:not(.is-open) > .Select-control {\n  cursor: text;\n}\n.Select.is-focused > .Select-control {\n  background: #fff;\n}\n.Select.is-focused:not(.is-open) > .Select-control {\n  border-color: #007eff;\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 0 3px rgba(0, 126, 255, 0.1);\n  background: #fff;\n}\n.Select.has-value.is-clearable.Select--single > .Select-control .Select-value {\n  padding-right: 42px;\n}\n.Select.has-value.Select--single > .Select-control .Select-value .Select-value-label,\n.Select.has-value.is-pseudo-focused.Select--single > .Select-control .Select-value .Select-value-label {\n  color: #333;\n}\n.Select.has-value.Select--single > .Select-control .Select-value a.Select-value-label,\n.Select.has-value.is-pseudo-focused.Select--single > .Select-control .Select-value a.Select-value-label {\n  cursor: pointer;\n  text-decoration: none;\n}\n.Select.has-value.Select--single > .Select-control .Select-value a.Select-value-label:hover,\n.Select.has-value.is-pseudo-focused.Select--single > .Select-control .Select-value a.Select-value-label:hover,\n.Select.has-value.Select--single > .Select-control .Select-value a.Select-value-label:focus,\n.Select.has-value.is-pseudo-focused.Select--single > .Select-control .Select-value a.Select-value-label:focus {\n  color: #007eff;\n  outline: none;\n  text-decoration: underline;\n}\n.Select.has-value.Select--single > .Select-control .Select-value a.Select-value-label:focus,\n.Select.has-value.is-pseudo-focused.Select--single > .Select-control .Select-value a.Select-value-label:focus {\n  background: #fff;\n}\n.Select.has-value.is-pseudo-focused .Select-input {\n  opacity: 0;\n}\n.Select.is-open .Select-arrow,\n.Select .Select-arrow-zone:hover > .Select-arrow {\n  border-top-color: #666;\n}\n.Select.Select--rtl {\n  direction: rtl;\n  text-align: right;\n}\n.Select-control {\n  background-color: #fff;\n  border-color: #d9d9d9 #ccc #b3b3b3;\n  border-radius: 4px;\n  border: 1px solid #ccc;\n  color: #333;\n  cursor: default;\n  display: table;\n  border-spacing: 0;\n  border-collapse: separate;\n  height: 36px;\n  outline: none;\n  overflow: hidden;\n  position: relative;\n  width: 100%;\n}\n.Select-control:hover {\n  box-shadow: 0 1px 0 rgba(0, 0, 0, 0.06);\n}\n.Select-control .Select-input:focus {\n  outline: none;\n  background: #fff;\n}\n.Select-placeholder,\n.Select--single > .Select-control .Select-value {\n  bottom: 0;\n  color: #aaa;\n  left: 0;\n  line-height: 34px;\n  padding-left: 10px;\n  padding-right: 10px;\n  position: absolute;\n  right: 0;\n  top: 0;\n  max-width: 100%;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n.Select-input {\n  height: 34px;\n  padding-left: 10px;\n  padding-right: 10px;\n  vertical-align: middle;\n}\n.Select-input > input {\n  width: 100%;\n  background: none transparent;\n  border: 0 none;\n  box-shadow: none;\n  cursor: default;\n  display: inline-block;\n  font-family: inherit;\n  font-size: inherit;\n  margin: 0;\n  outline: none;\n  line-height: 17px;\n  /* For IE 8 compatibility */\n  padding: 8px 0 12px;\n  /* For IE 8 compatibility */\n  -webkit-appearance: none;\n}\n.is-focused .Select-input > input {\n  cursor: text;\n}\n.has-value.is-pseudo-focused .Select-input {\n  opacity: 0;\n}\n.Select-control:not(.is-searchable) > .Select-input {\n  outline: none;\n}\n.Select-loading-zone {\n  cursor: pointer;\n  display: table-cell;\n  position: relative;\n  text-align: center;\n  vertical-align: middle;\n  width: 16px;\n}\n.Select-loading {\n  -webkit-animation: Select-animation-spin 400ms infinite linear;\n  -o-animation: Select-animation-spin 400ms infinite linear;\n  animation: Select-animation-spin 400ms infinite linear;\n  width: 16px;\n  height: 16px;\n  box-sizing: border-box;\n  border-radius: 50%;\n  border: 2px solid #ccc;\n  border-right-color: #333;\n  display: inline-block;\n  position: relative;\n  vertical-align: middle;\n}\n.Select-clear-zone {\n  -webkit-animation: Select-animation-fadeIn 200ms;\n  -o-animation: Select-animation-fadeIn 200ms;\n  animation: Select-animation-fadeIn 200ms;\n  color: #999;\n  cursor: pointer;\n  display: table-cell;\n  position: relative;\n  text-align: center;\n  vertical-align: middle;\n  width: 17px;\n}\n.Select-clear-zone:hover {\n  color: #D0021B;\n}\n.Select-clear {\n  display: inline-block;\n  font-size: 18px;\n  line-height: 1;\n}\n.Select--multi .Select-clear-zone {\n  width: 17px;\n}\n.Select-arrow-zone {\n  cursor: pointer;\n  display: table-cell;\n  position: relative;\n  text-align: center;\n  vertical-align: middle;\n  width: 25px;\n  padding-right: 5px;\n}\n.Select--rtl .Select-arrow-zone {\n  padding-right: 0;\n  padding-left: 5px;\n}\n.Select-arrow {\n  border-color: #999 transparent transparent;\n  border-style: solid;\n  border-width: 5px 5px 2.5px;\n  display: inline-block;\n  height: 0;\n  width: 0;\n  position: relative;\n}\n.Select-control > *:last-child {\n  padding-right: 5px;\n}\n.Select--multi .Select-multi-value-wrapper {\n  display: inline-block;\n}\n.Select .Select-aria-only {\n  position: absolute;\n  display: inline-block;\n  height: 1px;\n  width: 1px;\n  margin: -1px;\n  clip: rect(0, 0, 0, 0);\n  overflow: hidden;\n  float: left;\n}\n@-webkit-keyframes Select-animation-fadeIn {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n@keyframes Select-animation-fadeIn {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n.Select-menu-outer {\n  border-bottom-right-radius: 4px;\n  border-bottom-left-radius: 4px;\n  background-color: #fff;\n  border: 1px solid #ccc;\n  border-top-color: #e6e6e6;\n  box-shadow: 0 1px 0 rgba(0, 0, 0, 0.06);\n  box-sizing: border-box;\n  margin-top: -1px;\n  max-height: 200px;\n  position: absolute;\n  left: 0;\n  top: 100%;\n  width: 100%;\n  z-index: 1;\n  -webkit-overflow-scrolling: touch;\n}\n.Select-menu {\n  max-height: 198px;\n  overflow-y: auto;\n}\n.Select-option {\n  box-sizing: border-box;\n  background-color: #fff;\n  color: #666666;\n  cursor: pointer;\n  display: block;\n  padding: 8px 10px;\n}\n.Select-option:last-child {\n  border-bottom-right-radius: 4px;\n  border-bottom-left-radius: 4px;\n}\n.Select-option.is-selected {\n  background-color: #f5faff;\n  /* Fallback color for IE 8 */\n  background-color: rgba(0, 126, 255, 0.04);\n  color: #333;\n}\n.Select-option.is-focused {\n  background-color: #ebf5ff;\n  /* Fallback color for IE 8 */\n  background-color: rgba(0, 126, 255, 0.08);\n  color: #333;\n}\n.Select-option.is-disabled {\n  color: #cccccc;\n  cursor: default;\n}\n.Select-noresults {\n  box-sizing: border-box;\n  color: #999999;\n  cursor: default;\n  display: block;\n  padding: 8px 10px;\n}\n.Select--multi .Select-input {\n  vertical-align: middle;\n  margin-left: 10px;\n  padding: 0;\n}\n.Select--multi.Select--rtl .Select-input {\n  margin-left: 0;\n  margin-right: 10px;\n}\n.Select--multi.has-value .Select-input {\n  margin-left: 5px;\n}\n.Select--multi .Select-value {\n  background-color: #ebf5ff;\n  /* Fallback color for IE 8 */\n  background-color: rgba(0, 126, 255, 0.08);\n  border-radius: 2px;\n  border: 1px solid #c2e0ff;\n  /* Fallback color for IE 8 */\n  border: 1px solid rgba(0, 126, 255, 0.24);\n  color: #007eff;\n  display: inline-block;\n  font-size: 0.9em;\n  line-height: 1.4;\n  margin-left: 5px;\n  margin-top: 5px;\n  vertical-align: top;\n}\n.Select--multi .Select-value-icon,\n.Select--multi .Select-value-label {\n  display: inline-block;\n  vertical-align: middle;\n}\n.Select--multi .Select-value-label {\n  border-bottom-right-radius: 2px;\n  border-top-right-radius: 2px;\n  cursor: default;\n  padding: 2px 5px;\n}\n.Select--multi a.Select-value-label {\n  color: #007eff;\n  cursor: pointer;\n  text-decoration: none;\n}\n.Select--multi a.Select-value-label:hover {\n  text-decoration: underline;\n}\n.Select--multi .Select-value-icon {\n  cursor: pointer;\n  border-bottom-left-radius: 2px;\n  border-top-left-radius: 2px;\n  border-right: 1px solid #c2e0ff;\n  /* Fallback color for IE 8 */\n  border-right: 1px solid rgba(0, 126, 255, 0.24);\n  padding: 1px 5px 3px;\n}\n.Select--multi .Select-value-icon:hover,\n.Select--multi .Select-value-icon:focus {\n  background-color: #d8eafd;\n  /* Fallback color for IE 8 */\n  background-color: rgba(0, 113, 230, 0.08);\n  color: #0071e6;\n}\n.Select--multi .Select-value-icon:active {\n  background-color: #c2e0ff;\n  /* Fallback color for IE 8 */\n  background-color: rgba(0, 126, 255, 0.24);\n}\n.Select--multi.Select--rtl .Select-value {\n  margin-left: 0;\n  margin-right: 5px;\n}\n.Select--multi.Select--rtl .Select-value-icon {\n  border-right: none;\n  border-left: 1px solid #c2e0ff;\n  /* Fallback color for IE 8 */\n  border-left: 1px solid rgba(0, 126, 255, 0.24);\n}\n.Select--multi.is-disabled .Select-value {\n  background-color: #fcfcfc;\n  border: 1px solid #e3e3e3;\n  color: #333;\n}\n.Select--multi.is-disabled .Select-value-icon {\n  cursor: not-allowed;\n  border-right: 1px solid #e3e3e3;\n}\n.Select--multi.is-disabled .Select-value-icon:hover,\n.Select--multi.is-disabled .Select-value-icon:focus,\n.Select--multi.is-disabled .Select-value-icon:active {\n  background-color: #fcfcfc;\n}\n@keyframes Select-animation-spin {\n  to {\n    transform: rotate(1turn);\n  }\n}\n@-webkit-keyframes Select-animation-spin {\n  to {\n    -webkit-transform: rotate(1turn);\n  }\n}\n",""])},function(e,t,n){var r=n(16);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(7)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){return function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var u,a=e[Symbol.iterator]();!(r=(u=a.next()).done)&&(n.push(u.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{!r&&a.return&&a.return()}finally{if(o)throw i}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}();t.selectionCycle=function(e,t){var n=o.uniq(o.pluck(0,t)).sort(),i=o.uniq(o.pluck(1,t)).sort(),u=n[0],a=i[0],s=n[n.length-1],l=i[i.length-1],c=r(e,2),f=c[0],p=c[1],d=[f,p];f>s&&(d[0]=u,d[1]=p+1>l?a:p+1);f<u&&(d[0]=s,d[1]=p-1<a?l:p-1);p>l&&(d[1]=a,d[0]=f+1>s?u:f+1);p<a&&(d[1]=l,d[0]=f-1<a?s:f-1);return d};var o=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(3))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isPrintableChar=function(e){return 32==e||e>=48&&e<=57||e>=96&&e<=111||e>=186&&e<=192||e>=219&&e<=222||e>=226||e>=65&&e<=90},t.isMetaKey=function(e){return-1!==o.indexOf(e)},t.isNavKey=function(e){return-1!==u.indexOf(e)},t.isArrowKey=function(e){return-1!==i.indexOf(e)},t.isCtrlKey=function(e){var t=[];window.navigator.platform.includes("Mac")?t.push(r.COMMAND_LEFT,r.COMMAND_RIGHT,r.COMMAND_FIREFOX):t.push(r.CONTROL);return t.includes(e)},t.isCtrlMetaKey=function(e){return[r.CONTROL,r.COMMAND_LEFT,r.COMMAND_RIGHT,r.COMMAND_FIREFOX].includes(e)};var r=t.KEY_CODES={MOUSE_LEFT:1,MOUSE_RIGHT:3,MOUSE_MIDDLE:2,BACKSPACE:8,COMMA:188,INSERT:45,DELETE:46,END:35,ENTER:13,ESCAPE:27,CONTROL:17,COMMAND_LEFT:91,COMMAND_RIGHT:93,COMMAND_FIREFOX:224,ALT:18,HOME:36,PAGE_DOWN:34,PAGE_UP:33,PERIOD:190,SPACE:32,SHIFT:16,CAPS_LOCK:20,TAB:9,ARROW_RIGHT:39,ARROW_LEFT:37,ARROW_UP:38,ARROW_DOWN:40,F1:112,F2:113,F3:114,F4:115,F5:116,F6:117,F7:118,F8:119,F9:120,F10:121,F11:122,F12:123,A:65,X:88,C:67,V:86},o=[r.ARROW_DOWN,r.ARROW_UP,r.ARROW_LEFT,r.ARROW_RIGHT,r.HOME,r.END,r.DELETE,r.BACKSPACE,r.F1,r.F2,r.F3,r.F4,r.F5,r.F6,r.F7,r.F8,r.F9,r.F10,r.F11,r.F12,r.TAB,r.PAGE_DOWN,r.PAGE_UP,r.ENTER,r.ESCAPE,r.SHIFT,r.CAPS_LOCK,r.ALT],i=[r.ARROW_DOWN,r.ARROW_UP,r.ARROW_LEFT,r.ARROW_RIGHT],u=[].concat(i,[r.TAB,r.ENTER]);t.isCtrlDown=function(e){return(e.ctrlKey||e.metaKey)&&!e.altKey}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(1),i=l(o),u=l(n(0)),a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(3)),s=l(n(5));function l(e){return e&&e.__esModule?e:{default:e}}var c=function(e){return Array.isArray(e.name)?e.name.length:1},f=function(e){function t(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var e=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e.sort=e.sort.bind(e),e.renderHeaderCells=e.renderHeaderCells.bind(e),e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.Component),r(t,[{key:"sort",value:function(e){var t=this.props,n=t.dataframe,r=t.setProps,o=t.sort,i=o,u=a.find(a.propEq("column",e))(o);u?"desc"===u.direction?u.direction="asc":"asc"===u.direction&&(i=i.filter(a.complement(a.propEq("column",e)))):i.push({column:e,direction:"desc"}),r({sort:(i=i.filter(a.complement(a.isEmpty))).filter(a.complement(a.not)),dataframe:a.sortWith(i.map(function(e){return"desc"===e.direction?a.descend(a.prop(e.column)):a.ascend(a.prop(e.column))}),n)})}},{key:"renderHeaderCells",value:function(e){var t=this,n=e.labels,r=e.rowIsSortable,o=e.mergeCells,u=this.props,l=u.columns,c=u.sort,f=void 0;if(o){f=[0];var p=0;n.forEach(function(e,t){e!==n[p]&&(f.push(t),p=t)})}else f=a.range(0,l.length);return f.map(function(e,u){var p=l[e];if(p.hidden)return null;var d=a.merge({},p.style)||{},h=void 0;if(h=o?e===a.last(f)?n.length-e:f[u+1]-e:1,p.width&&1===h&&(d.width=p.width,d.maxWidth=p.width,d.minWidth=p.width),d=a.merge(d,s.default.scroll.cell(t.props,e,0)),1!==h){var v=a.range(e,a.min(e+h,n.length)).map(function(e){return"Number"===a.type(l[e].width)?l[e].width+"px":l[e].width});d.width="calc("+v.join(" + ")+")",d.maxWidth=d.width,d.minWidth=d.width}return i.default.createElement("th",{colSpan:h,style:d,className:e===l.length-1||e===a.last(f)?"cell--right-last":""},r?i.default.createElement("span",{className:"filter",onClick:function(){return t.sort(p.id)}},a.find(a.propEq("column",p.id),c)?"desc"===a.find(a.propEq("column",p.id),c).direction?"↑":"↓":"↕"):"",i.default.createElement("span",null,n[e]))})}},{key:"render",value:function(){var e=this,t=this.props,n=t.collapsable,r=t.columns,o=t.sortable,u=t.merge_duplicate_headers,l=t.row_selectable,f=void 0,p=n?i.default.createElement("th",{className:"expanded-row--empty-cell"}):null,d=l?i.default.createElement("th",{className:"expanded-row--empty-cell",style:{width:30}}):null,h=Math.max.apply(Math,r.map(c));if(1===h){var v=s.default.scroll.row(this.props,0);f=i.default.createElement("tr",{style:v},p,d,this.renderHeaderCells({labels:a.pluck("name",r),rowIsSortable:o}))}else f=[],a.range(0,h).forEach(function(t){var n=s.default.scroll.row(e.props,t);f.push(i.default.createElement("tr",{style:n},p,d,e.renderHeaderCells({labels:r.map(function(e){return a.isNil(e.name)&&t===h-1?e.id:function(e,t){return Array.isArray(e.name)?e.name[t]:""}(e,t)}),rowIsSortable:o&&t+1===h,mergeCells:u&&t+1!==h})))});return i.default.createElement("thead",null,f)}}]),t}();t.default=f,f.propTypes={collapsable:u.default.any,columns:u.default.any,sortable:u.default.any,merge_duplicate_headers:u.default.any,dataframe:u.default.any,setProps:u.default.any,sort:u.default.any}},function(e,t,n){"use strict";n.r(t),n.d(t,"Async",function(){return z}),n.d(t,"AsyncCreatable",function(){return X}),n.d(t,"Creatable",function(){return K}),n.d(t,"Value",function(){return F}),n.d(t,"Option",function(){return A}),n.d(t,"defaultMenuRenderer",function(){return b}),n.d(t,"defaultArrowRenderer",function(){return p}),n.d(t,"defaultClearRenderer",function(){return d}),n.d(t,"defaultFilterOptions",function(){return m});var r=n(10),o=n.n(r),i=n(2),u=n.n(i),a=n(0),s=n.n(a),l=n(1),c=n.n(l),f=n(4),p=function(e){var t=e.onMouseDown;return c.a.createElement("span",{className:"Select-arrow",onMouseDown:t})};p.propTypes={onMouseDown:s.a.func};var d=function(){return c.a.createElement("span",{className:"Select-clear",dangerouslySetInnerHTML:{__html:"&times;"}})},h=[{base:"A",letters:/[\u0041\u24B6\uFF21\u00C0\u00C1\u00C2\u1EA6\u1EA4\u1EAA\u1EA8\u00C3\u0100\u0102\u1EB0\u1EAE\u1EB4\u1EB2\u0226\u01E0\u00C4\u01DE\u1EA2\u00C5\u01FA\u01CD\u0200\u0202\u1EA0\u1EAC\u1EB6\u1E00\u0104\u023A\u2C6F]/g},{base:"AA",letters:/[\uA732]/g},{base:"AE",letters:/[\u00C6\u01FC\u01E2]/g},{base:"AO",letters:/[\uA734]/g},{base:"AU",letters:/[\uA736]/g},{base:"AV",letters:/[\uA738\uA73A]/g},{base:"AY",letters:/[\uA73C]/g},{base:"B",letters:/[\u0042\u24B7\uFF22\u1E02\u1E04\u1E06\u0243\u0182\u0181]/g},{base:"C",letters:/[\u0043\u24B8\uFF23\u0106\u0108\u010A\u010C\u00C7\u1E08\u0187\u023B\uA73E]/g},{base:"D",letters:/[\u0044\u24B9\uFF24\u1E0A\u010E\u1E0C\u1E10\u1E12\u1E0E\u0110\u018B\u018A\u0189\uA779]/g},{base:"DZ",letters:/[\u01F1\u01C4]/g},{base:"Dz",letters:/[\u01F2\u01C5]/g},{base:"E",letters:/[\u0045\u24BA\uFF25\u00C8\u00C9\u00CA\u1EC0\u1EBE\u1EC4\u1EC2\u1EBC\u0112\u1E14\u1E16\u0114\u0116\u00CB\u1EBA\u011A\u0204\u0206\u1EB8\u1EC6\u0228\u1E1C\u0118\u1E18\u1E1A\u0190\u018E]/g},{base:"F",letters:/[\u0046\u24BB\uFF26\u1E1E\u0191\uA77B]/g},{base:"G",letters:/[\u0047\u24BC\uFF27\u01F4\u011C\u1E20\u011E\u0120\u01E6\u0122\u01E4\u0193\uA7A0\uA77D\uA77E]/g},{base:"H",letters:/[\u0048\u24BD\uFF28\u0124\u1E22\u1E26\u021E\u1E24\u1E28\u1E2A\u0126\u2C67\u2C75\uA78D]/g},{base:"I",letters:/[\u0049\u24BE\uFF29\u00CC\u00CD\u00CE\u0128\u012A\u012C\u0130\u00CF\u1E2E\u1EC8\u01CF\u0208\u020A\u1ECA\u012E\u1E2C\u0197]/g},{base:"J",letters:/[\u004A\u24BF\uFF2A\u0134\u0248]/g},{base:"K",letters:/[\u004B\u24C0\uFF2B\u1E30\u01E8\u1E32\u0136\u1E34\u0198\u2C69\uA740\uA742\uA744\uA7A2]/g},{base:"L",letters:/[\u004C\u24C1\uFF2C\u013F\u0139\u013D\u1E36\u1E38\u013B\u1E3C\u1E3A\u0141\u023D\u2C62\u2C60\uA748\uA746\uA780]/g},{base:"LJ",letters:/[\u01C7]/g},{base:"Lj",letters:/[\u01C8]/g},{base:"M",letters:/[\u004D\u24C2\uFF2D\u1E3E\u1E40\u1E42\u2C6E\u019C]/g},{base:"N",letters:/[\u004E\u24C3\uFF2E\u01F8\u0143\u00D1\u1E44\u0147\u1E46\u0145\u1E4A\u1E48\u0220\u019D\uA790\uA7A4]/g},{base:"NJ",letters:/[\u01CA]/g},{base:"Nj",letters:/[\u01CB]/g},{base:"O",letters:/[\u004F\u24C4\uFF2F\u00D2\u00D3\u00D4\u1ED2\u1ED0\u1ED6\u1ED4\u00D5\u1E4C\u022C\u1E4E\u014C\u1E50\u1E52\u014E\u022E\u0230\u00D6\u022A\u1ECE\u0150\u01D1\u020C\u020E\u01A0\u1EDC\u1EDA\u1EE0\u1EDE\u1EE2\u1ECC\u1ED8\u01EA\u01EC\u00D8\u01FE\u0186\u019F\uA74A\uA74C]/g},{base:"OI",letters:/[\u01A2]/g},{base:"OO",letters:/[\uA74E]/g},{base:"OU",letters:/[\u0222]/g},{base:"P",letters:/[\u0050\u24C5\uFF30\u1E54\u1E56\u01A4\u2C63\uA750\uA752\uA754]/g},{base:"Q",letters:/[\u0051\u24C6\uFF31\uA756\uA758\u024A]/g},{base:"R",letters:/[\u0052\u24C7\uFF32\u0154\u1E58\u0158\u0210\u0212\u1E5A\u1E5C\u0156\u1E5E\u024C\u2C64\uA75A\uA7A6\uA782]/g},{base:"S",letters:/[\u0053\u24C8\uFF33\u1E9E\u015A\u1E64\u015C\u1E60\u0160\u1E66\u1E62\u1E68\u0218\u015E\u2C7E\uA7A8\uA784]/g},{base:"T",letters:/[\u0054\u24C9\uFF34\u1E6A\u0164\u1E6C\u021A\u0162\u1E70\u1E6E\u0166\u01AC\u01AE\u023E\uA786]/g},{base:"TZ",letters:/[\uA728]/g},{base:"U",letters:/[\u0055\u24CA\uFF35\u00D9\u00DA\u00DB\u0168\u1E78\u016A\u1E7A\u016C\u00DC\u01DB\u01D7\u01D5\u01D9\u1EE6\u016E\u0170\u01D3\u0214\u0216\u01AF\u1EEA\u1EE8\u1EEE\u1EEC\u1EF0\u1EE4\u1E72\u0172\u1E76\u1E74\u0244]/g},{base:"V",letters:/[\u0056\u24CB\uFF36\u1E7C\u1E7E\u01B2\uA75E\u0245]/g},{base:"VY",letters:/[\uA760]/g},{base:"W",letters:/[\u0057\u24CC\uFF37\u1E80\u1E82\u0174\u1E86\u1E84\u1E88\u2C72]/g},{base:"X",letters:/[\u0058\u24CD\uFF38\u1E8A\u1E8C]/g},{base:"Y",letters:/[\u0059\u24CE\uFF39\u1EF2\u00DD\u0176\u1EF8\u0232\u1E8E\u0178\u1EF6\u1EF4\u01B3\u024E\u1EFE]/g},{base:"Z",letters:/[\u005A\u24CF\uFF3A\u0179\u1E90\u017B\u017D\u1E92\u1E94\u01B5\u0224\u2C7F\u2C6B\uA762]/g},{base:"a",letters:/[\u0061\u24D0\uFF41\u1E9A\u00E0\u00E1\u00E2\u1EA7\u1EA5\u1EAB\u1EA9\u00E3\u0101\u0103\u1EB1\u1EAF\u1EB5\u1EB3\u0227\u01E1\u00E4\u01DF\u1EA3\u00E5\u01FB\u01CE\u0201\u0203\u1EA1\u1EAD\u1EB7\u1E01\u0105\u2C65\u0250]/g},{base:"aa",letters:/[\uA733]/g},{base:"ae",letters:/[\u00E6\u01FD\u01E3]/g},{base:"ao",letters:/[\uA735]/g},{base:"au",letters:/[\uA737]/g},{base:"av",letters:/[\uA739\uA73B]/g},{base:"ay",letters:/[\uA73D]/g},{base:"b",letters:/[\u0062\u24D1\uFF42\u1E03\u1E05\u1E07\u0180\u0183\u0253]/g},{base:"c",letters:/[\u0063\u24D2\uFF43\u0107\u0109\u010B\u010D\u00E7\u1E09\u0188\u023C\uA73F\u2184]/g},{base:"d",letters:/[\u0064\u24D3\uFF44\u1E0B\u010F\u1E0D\u1E11\u1E13\u1E0F\u0111\u018C\u0256\u0257\uA77A]/g},{base:"dz",letters:/[\u01F3\u01C6]/g},{base:"e",letters:/[\u0065\u24D4\uFF45\u00E8\u00E9\u00EA\u1EC1\u1EBF\u1EC5\u1EC3\u1EBD\u0113\u1E15\u1E17\u0115\u0117\u00EB\u1EBB\u011B\u0205\u0207\u1EB9\u1EC7\u0229\u1E1D\u0119\u1E19\u1E1B\u0247\u025B\u01DD]/g},{base:"f",letters:/[\u0066\u24D5\uFF46\u1E1F\u0192\uA77C]/g},{base:"g",letters:/[\u0067\u24D6\uFF47\u01F5\u011D\u1E21\u011F\u0121\u01E7\u0123\u01E5\u0260\uA7A1\u1D79\uA77F]/g},{base:"h",letters:/[\u0068\u24D7\uFF48\u0125\u1E23\u1E27\u021F\u1E25\u1E29\u1E2B\u1E96\u0127\u2C68\u2C76\u0265]/g},{base:"hv",letters:/[\u0195]/g},{base:"i",letters:/[\u0069\u24D8\uFF49\u00EC\u00ED\u00EE\u0129\u012B\u012D\u00EF\u1E2F\u1EC9\u01D0\u0209\u020B\u1ECB\u012F\u1E2D\u0268\u0131]/g},{base:"j",letters:/[\u006A\u24D9\uFF4A\u0135\u01F0\u0249]/g},{base:"k",letters:/[\u006B\u24DA\uFF4B\u1E31\u01E9\u1E33\u0137\u1E35\u0199\u2C6A\uA741\uA743\uA745\uA7A3]/g},{base:"l",letters:/[\u006C\u24DB\uFF4C\u0140\u013A\u013E\u1E37\u1E39\u013C\u1E3D\u1E3B\u017F\u0142\u019A\u026B\u2C61\uA749\uA781\uA747]/g},{base:"lj",letters:/[\u01C9]/g},{base:"m",letters:/[\u006D\u24DC\uFF4D\u1E3F\u1E41\u1E43\u0271\u026F]/g},{base:"n",letters:/[\u006E\u24DD\uFF4E\u01F9\u0144\u00F1\u1E45\u0148\u1E47\u0146\u1E4B\u1E49\u019E\u0272\u0149\uA791\uA7A5]/g},{base:"nj",letters:/[\u01CC]/g},{base:"o",letters:/[\u006F\u24DE\uFF4F\u00F2\u00F3\u00F4\u1ED3\u1ED1\u1ED7\u1ED5\u00F5\u1E4D\u022D\u1E4F\u014D\u1E51\u1E53\u014F\u022F\u0231\u00F6\u022B\u1ECF\u0151\u01D2\u020D\u020F\u01A1\u1EDD\u1EDB\u1EE1\u1EDF\u1EE3\u1ECD\u1ED9\u01EB\u01ED\u00F8\u01FF\u0254\uA74B\uA74D\u0275]/g},{base:"oi",letters:/[\u01A3]/g},{base:"ou",letters:/[\u0223]/g},{base:"oo",letters:/[\uA74F]/g},{base:"p",letters:/[\u0070\u24DF\uFF50\u1E55\u1E57\u01A5\u1D7D\uA751\uA753\uA755]/g},{base:"q",letters:/[\u0071\u24E0\uFF51\u024B\uA757\uA759]/g},{base:"r",letters:/[\u0072\u24E1\uFF52\u0155\u1E59\u0159\u0211\u0213\u1E5B\u1E5D\u0157\u1E5F\u024D\u027D\uA75B\uA7A7\uA783]/g},{base:"s",letters:/[\u0073\u24E2\uFF53\u00DF\u015B\u1E65\u015D\u1E61\u0161\u1E67\u1E63\u1E69\u0219\u015F\u023F\uA7A9\uA785\u1E9B]/g},{base:"t",letters:/[\u0074\u24E3\uFF54\u1E6B\u1E97\u0165\u1E6D\u021B\u0163\u1E71\u1E6F\u0167\u01AD\u0288\u2C66\uA787]/g},{base:"tz",letters:/[\uA729]/g},{base:"u",letters:/[\u0075\u24E4\uFF55\u00F9\u00FA\u00FB\u0169\u1E79\u016B\u1E7B\u016D\u00FC\u01DC\u01D8\u01D6\u01DA\u1EE7\u016F\u0171\u01D4\u0215\u0217\u01B0\u1EEB\u1EE9\u1EEF\u1EED\u1EF1\u1EE5\u1E73\u0173\u1E77\u1E75\u0289]/g},{base:"v",letters:/[\u0076\u24E5\uFF56\u1E7D\u1E7F\u028B\uA75F\u028C]/g},{base:"vy",letters:/[\uA761]/g},{base:"w",letters:/[\u0077\u24E6\uFF57\u1E81\u1E83\u0175\u1E87\u1E85\u1E98\u1E89\u2C73]/g},{base:"x",letters:/[\u0078\u24E7\uFF58\u1E8B\u1E8D]/g},{base:"y",letters:/[\u0079\u24E8\uFF59\u1EF3\u00FD\u0177\u1EF9\u0233\u1E8F\u00FF\u1EF7\u1E99\u1EF5\u01B4\u024F\u1EFF]/g},{base:"z",letters:/[\u007A\u24E9\uFF5A\u017A\u1E91\u017C\u017E\u1E93\u1E95\u01B6\u0225\u0240\u2C6C\uA763]/g}],v=function(e){for(var t=0;t<h.length;t++)e=e.replace(h[t].letters,h[t].base);return e},y=function(e){return void 0!==e&&null!==e&&""!==e},m=function(e,t,n,r){return r.ignoreAccents&&(t=v(t)),r.ignoreCase&&(t=t.toLowerCase()),r.trimFilter&&(t=t.replace(/^\s+|\s+$/g,"")),n&&(n=n.map(function(e){return e[r.valueKey]})),e.filter(function(e){if(n&&n.indexOf(e[r.valueKey])>-1)return!1;if(r.filterOption)return r.filterOption.call(void 0,e,t);if(!t)return!0;var o=e[r.valueKey],i=e[r.labelKey],u=y(o),a=y(i);if(!u&&!a)return!1;var s=u?String(o):null,l=a?String(i):null;return r.ignoreAccents&&(s&&"label"!==r.matchProp&&(s=v(s)),l&&"value"!==r.matchProp&&(l=v(l))),r.ignoreCase&&(s&&"label"!==r.matchProp&&(s=s.toLowerCase()),l&&"value"!==r.matchProp&&(l=l.toLowerCase())),"start"===r.matchPos?s&&"label"!==r.matchProp&&s.substr(0,t.length)===t||l&&"value"!==r.matchProp&&l.substr(0,t.length)===t:s&&"label"!==r.matchProp&&s.indexOf(t)>=0||l&&"value"!==r.matchProp&&l.indexOf(t)>=0})},b=function(e){var t=e.focusedOption,n=e.focusOption,r=e.inputValue,o=e.instancePrefix,i=e.onFocus,a=e.onOptionRef,s=e.onSelect,l=e.optionClassName,f=e.optionComponent,p=e.optionRenderer,d=e.options,h=e.removeValue,v=e.selectValue,y=e.valueArray,m=e.valueKey,b=f;return d.map(function(e,f){var d=y&&y.some(function(t){return t[m]===e[m]}),g=e===t,E=u()(l,{"Select-option":!0,"is-selected":d,"is-focused":g,"is-disabled":e.disabled});return c.a.createElement(b,{className:E,focusOption:n,inputValue:r,instancePrefix:o,isDisabled:e.disabled,isFocused:g,isSelected:d,key:"option-"+f+"-"+e[m],onFocus:i,onSelect:s,option:e,optionIndex:f,ref:function(e){a(e,g)},removeValue:h,selectValue:v},p(e,f,r))})};b.propTypes={focusOption:s.a.func,focusedOption:s.a.object,inputValue:s.a.string,instancePrefix:s.a.string,onFocus:s.a.func,onOptionRef:s.a.func,onSelect:s.a.func,optionClassName:s.a.string,optionComponent:s.a.func,optionRenderer:s.a.func,options:s.a.array,removeValue:s.a.func,selectValue:s.a.func,valueArray:s.a.array,valueKey:s.a.string};var g=function(e){e.preventDefault(),e.stopPropagation(),"A"===e.target.tagName&&"href"in e.target&&(e.target.target?window.open(e.target.href,e.target.target):window.location.href=e.target.href)},E="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},w=(function(){function e(e){this.value=e}function t(t){var n,r;function o(n,r){try{var u=t[n](r),a=u.value;a instanceof e?Promise.resolve(a.value).then(function(e){o("next",e)},function(e){o("throw",e)}):i(u.done?"return":"normal",u.value)}catch(e){i("throw",e)}}function i(e,t){switch(e){case"return":n.resolve({value:t,done:!0});break;case"throw":n.reject(t);break;default:n.resolve({value:t,done:!1})}(n=n.next)?o(n.key,n.arg):r=null}this._invoke=function(e,t){return new Promise(function(i,u){var a={key:e,arg:t,resolve:i,reject:u,next:null};r?r=r.next=a:(n=r=a,o(e,t))})},"function"!=typeof t.return&&(this.return=void 0)}"function"==typeof Symbol&&Symbol.asyncIterator&&(t.prototype[Symbol.asyncIterator]=function(){return this}),t.prototype.next=function(e){return this._invoke("next",e)},t.prototype.throw=function(e){return this._invoke("throw",e)},t.prototype.return=function(e){return this._invoke("return",e)}}(),function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}),x=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),O=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e},S=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},C=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)},k=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n},_=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t},A=function(e){function t(e){w(this,t);var n=_(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.handleMouseDown=n.handleMouseDown.bind(n),n.handleMouseEnter=n.handleMouseEnter.bind(n),n.handleMouseMove=n.handleMouseMove.bind(n),n.handleTouchStart=n.handleTouchStart.bind(n),n.handleTouchEnd=n.handleTouchEnd.bind(n),n.handleTouchMove=n.handleTouchMove.bind(n),n.onFocus=n.onFocus.bind(n),n}return C(t,e),x(t,[{key:"handleMouseDown",value:function(e){e.preventDefault(),e.stopPropagation(),this.props.onSelect(this.props.option,e)}},{key:"handleMouseEnter",value:function(e){this.onFocus(e)}},{key:"handleMouseMove",value:function(e){this.onFocus(e)}},{key:"handleTouchEnd",value:function(e){this.dragging||this.handleMouseDown(e)}},{key:"handleTouchMove",value:function(){this.dragging=!0}},{key:"handleTouchStart",value:function(){this.dragging=!1}},{key:"onFocus",value:function(e){this.props.isFocused||this.props.onFocus(this.props.option,e)}},{key:"render",value:function(){var e=this.props,t=e.option,n=e.instancePrefix,r=e.optionIndex,o=u()(this.props.className,t.className);return t.disabled?c.a.createElement("div",{className:o,onMouseDown:g,onClick:g},this.props.children):c.a.createElement("div",{className:o,style:t.style,role:"option","aria-label":t.label,onMouseDown:this.handleMouseDown,onMouseEnter:this.handleMouseEnter,onMouseMove:this.handleMouseMove,onTouchStart:this.handleTouchStart,onTouchMove:this.handleTouchMove,onTouchEnd:this.handleTouchEnd,id:n+"-option-"+r,title:t.title},this.props.children)}}]),t}(c.a.Component);A.propTypes={children:s.a.node,className:s.a.string,instancePrefix:s.a.string.isRequired,isDisabled:s.a.bool,isFocused:s.a.bool,isSelected:s.a.bool,onFocus:s.a.func,onSelect:s.a.func,onUnfocus:s.a.func,option:s.a.object.isRequired,optionIndex:s.a.number};var F=function(e){function t(e){w(this,t);var n=_(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.handleMouseDown=n.handleMouseDown.bind(n),n.onRemove=n.onRemove.bind(n),n.handleTouchEndRemove=n.handleTouchEndRemove.bind(n),n.handleTouchMove=n.handleTouchMove.bind(n),n.handleTouchStart=n.handleTouchStart.bind(n),n}return C(t,e),x(t,[{key:"handleMouseDown",value:function(e){if("mousedown"!==e.type||0===e.button)return this.props.onClick?(e.stopPropagation(),void this.props.onClick(this.props.value,e)):void(this.props.value.href&&e.stopPropagation())}},{key:"onRemove",value:function(e){e.preventDefault(),e.stopPropagation(),this.props.onRemove(this.props.value)}},{key:"handleTouchEndRemove",value:function(e){this.dragging||this.onRemove(e)}},{key:"handleTouchMove",value:function(){this.dragging=!0}},{key:"handleTouchStart",value:function(){this.dragging=!1}},{key:"renderRemoveIcon",value:function(){if(!this.props.disabled&&this.props.onRemove)return c.a.createElement("span",{className:"Select-value-icon","aria-hidden":"true",onMouseDown:this.onRemove,onTouchEnd:this.handleTouchEndRemove,onTouchStart:this.handleTouchStart,onTouchMove:this.handleTouchMove},"×")}},{key:"renderLabel",value:function(){return this.props.onClick||this.props.value.href?c.a.createElement("a",{className:"Select-value-label",href:this.props.value.href,target:this.props.value.target,onMouseDown:this.handleMouseDown,onTouchEnd:this.handleMouseDown},this.props.children):c.a.createElement("span",{className:"Select-value-label",role:"option","aria-selected":"true",id:this.props.id},this.props.children)}},{key:"render",value:function(){return c.a.createElement("div",{className:u()("Select-value",this.props.value.className),style:this.props.value.style,title:this.props.value.title},this.renderRemoveIcon(),this.renderLabel())}}]),t}(c.a.Component);F.propTypes={children:s.a.node,disabled:s.a.bool,id:s.a.string,onClick:s.a.func,onRemove:s.a.func,value:s.a.object.isRequired};
/*!
  Copyright (c) 2018 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/react-select
*/
var D=function(e){return"string"==typeof e?e:null!==e&&JSON.stringify(e)||""},T=s.a.oneOfType([s.a.string,s.a.node]),P=s.a.oneOfType([s.a.string,s.a.number]),j=1,R=function(e,t){var n=void 0===e?"undefined":E(e);if("string"!==n&&"number"!==n&&"boolean"!==n)return e;var r=t.options,o=t.valueKey;if(r)for(var i=0;i<r.length;i++)if(String(r[i][o])===String(e))return r[i]},M=function(e,t){return!e||(t?0===e.length:0===Object.keys(e).length)},N=function(e){function t(e){w(this,t);var n=_(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return["clearValue","focusOption","getOptionLabel","handleInputBlur","handleInputChange","handleInputFocus","handleInputValueChange","handleKeyDown","handleMenuScroll","handleMouseDown","handleMouseDownOnArrow","handleMouseDownOnMenu","handleTouchEnd","handleTouchEndClearValue","handleTouchMove","handleTouchOutside","handleTouchStart","handleValueClick","onOptionRef","removeValue","selectValue"].forEach(function(e){return n[e]=n[e].bind(n)}),n.state={inputValue:"",isFocused:!1,isOpen:!1,isPseudoFocused:!1,required:!1},n}return C(t,e),x(t,[{key:"componentWillMount",value:function(){this._instancePrefix="react-select-"+(this.props.instanceId||++j)+"-";var e=this.getValueArray(this.props.value);this.props.required&&this.setState({required:M(e[0],this.props.multi)})}},{key:"componentDidMount",value:function(){void 0!==this.props.autofocus&&"undefined"!=typeof console&&console.warn("Warning: The autofocus prop has changed to autoFocus, support will be removed after react-select@1.0"),(this.props.autoFocus||this.props.autofocus)&&this.focus()}},{key:"componentWillReceiveProps",value:function(e){var t=this.getValueArray(e.value,e);e.required?this.setState({required:M(t[0],e.multi)}):this.props.required&&this.setState({required:!1}),this.state.inputValue&&this.props.value!==e.value&&e.onSelectResetsInput&&this.setState({inputValue:this.handleInputValueChange("")})}},{key:"componentDidUpdate",value:function(e,t){if(this.menu&&this.focused&&this.state.isOpen&&!this.hasScrolledToOption){var n=Object(f.findDOMNode)(this.focused),r=Object(f.findDOMNode)(this.menu),o=r.scrollTop,i=o+r.offsetHeight,u=n.offsetTop,a=u+n.offsetHeight;(o>u||i<a)&&(r.scrollTop=n.offsetTop),this.hasScrolledToOption=!0}else this.state.isOpen||(this.hasScrolledToOption=!1);if(this._scrollToFocusedOptionOnUpdate&&this.focused&&this.menu){this._scrollToFocusedOptionOnUpdate=!1;var s=Object(f.findDOMNode)(this.focused),l=Object(f.findDOMNode)(this.menu),c=s.getBoundingClientRect(),p=l.getBoundingClientRect();c.bottom>p.bottom?l.scrollTop=s.offsetTop+s.clientHeight-l.offsetHeight:c.top<p.top&&(l.scrollTop=s.offsetTop)}if(this.props.scrollMenuIntoView&&this.menuContainer){var d=this.menuContainer.getBoundingClientRect();window.innerHeight<d.bottom+this.props.menuBuffer&&window.scrollBy(0,d.bottom+this.props.menuBuffer-window.innerHeight)}if(e.disabled!==this.props.disabled&&(this.setState({isFocused:!1}),this.closeMenu()),t.isOpen!==this.state.isOpen){this.toggleTouchOutsideEvent(this.state.isOpen);var h=this.state.isOpen?this.props.onOpen:this.props.onClose;h&&h()}}},{key:"componentWillUnmount",value:function(){this.toggleTouchOutsideEvent(!1)}},{key:"toggleTouchOutsideEvent",value:function(e){e?!document.addEventListener&&document.attachEvent?document.attachEvent("ontouchstart",this.handleTouchOutside):document.addEventListener("touchstart",this.handleTouchOutside):!document.removeEventListener&&document.detachEvent?document.detachEvent("ontouchstart",this.handleTouchOutside):document.removeEventListener("touchstart",this.handleTouchOutside)}},{key:"handleTouchOutside",value:function(e){this.wrapper&&!this.wrapper.contains(e.target)&&this.closeMenu()}},{key:"focus",value:function(){this.input&&this.input.focus()}},{key:"blurInput",value:function(){this.input&&this.input.blur()}},{key:"handleTouchMove",value:function(){this.dragging=!0}},{key:"handleTouchStart",value:function(){this.dragging=!1}},{key:"handleTouchEnd",value:function(e){this.dragging||this.handleMouseDown(e)}},{key:"handleTouchEndClearValue",value:function(e){this.dragging||this.clearValue(e)}},{key:"handleMouseDown",value:function(e){if(!(this.props.disabled||"mousedown"===e.type&&0!==e.button))if("INPUT"!==e.target.tagName){if(e.preventDefault(),!this.props.searchable)return this.focus(),this.setState({isOpen:!this.state.isOpen});if(this.state.isFocused){this.focus();var t=this.input,n=!0;"function"==typeof t.getInput&&(t=t.getInput()),t.value="",this._focusAfterClear&&(n=!1,this._focusAfterClear=!1),this.setState({isOpen:n,isPseudoFocused:!1,focusedOption:null})}else this._openAfterFocus=this.props.openOnClick,this.focus(),this.setState({focusedOption:null})}else this.state.isFocused?this.state.isOpen||this.setState({isOpen:!0,isPseudoFocused:!1}):(this._openAfterFocus=this.props.openOnClick,this.focus())}},{key:"handleMouseDownOnArrow",value:function(e){this.props.disabled||"mousedown"===e.type&&0!==e.button||(this.state.isOpen?(e.stopPropagation(),e.preventDefault(),this.closeMenu()):this.setState({isOpen:!0}))}},{key:"handleMouseDownOnMenu",value:function(e){this.props.disabled||"mousedown"===e.type&&0!==e.button||(e.stopPropagation(),e.preventDefault(),this._openAfterFocus=!0,this.focus())}},{key:"closeMenu",value:function(){this.props.onCloseResetsInput?this.setState({inputValue:this.handleInputValueChange(""),isOpen:!1,isPseudoFocused:this.state.isFocused&&!this.props.multi}):this.setState({isOpen:!1,isPseudoFocused:this.state.isFocused&&!this.props.multi}),this.hasScrolledToOption=!1}},{key:"handleInputFocus",value:function(e){if(!this.props.disabled){var t=this.state.isOpen||this._openAfterFocus||this.props.openOnFocus;t=!this._focusAfterClear&&t,this.props.onFocus&&this.props.onFocus(e),this.setState({isFocused:!0,isOpen:!!t}),this._focusAfterClear=!1,this._openAfterFocus=!1}}},{key:"handleInputBlur",value:function(e){if(!this.menu||this.menu!==document.activeElement&&!this.menu.contains(document.activeElement)){this.props.onBlur&&this.props.onBlur(e);var t={isFocused:!1,isOpen:!1,isPseudoFocused:!1};this.props.onBlurResetsInput&&(t.inputValue=this.handleInputValueChange("")),this.setState(t)}else this.focus()}},{key:"handleInputChange",value:function(e){var t=e.target.value;this.state.inputValue!==e.target.value&&(t=this.handleInputValueChange(t)),this.setState({inputValue:t,isOpen:!0,isPseudoFocused:!1})}},{key:"setInputValue",value:function(e){if(this.props.onInputChange){var t=this.props.onInputChange(e);null!=t&&"object"!==(void 0===t?"undefined":E(t))&&(e=""+t)}this.setState({inputValue:e})}},{key:"handleInputValueChange",value:function(e){if(this.props.onInputChange){var t=this.props.onInputChange(e);null!=t&&"object"!==(void 0===t?"undefined":E(t))&&(e=""+t)}return e}},{key:"handleKeyDown",value:function(e){if(!(this.props.disabled||"function"==typeof this.props.onInputKeyDown&&(this.props.onInputKeyDown(e),e.defaultPrevented)))switch(e.keyCode){case 8:!this.state.inputValue&&this.props.backspaceRemoves&&(e.preventDefault(),this.popValue());break;case 9:if(e.shiftKey||!this.state.isOpen||!this.props.tabSelectsValue)break;e.preventDefault(),this.selectFocusedOption();break;case 13:e.preventDefault(),e.stopPropagation(),this.state.isOpen?this.selectFocusedOption():this.focusNextOption();break;case 27:e.preventDefault(),this.state.isOpen?(this.closeMenu(),e.stopPropagation()):this.props.clearable&&this.props.escapeClearsValue&&(this.clearValue(e),e.stopPropagation());break;case 32:if(this.props.searchable)break;if(e.preventDefault(),!this.state.isOpen){this.focusNextOption();break}e.stopPropagation(),this.selectFocusedOption();break;case 38:e.preventDefault(),this.focusPreviousOption();break;case 40:e.preventDefault(),this.focusNextOption();break;case 33:e.preventDefault(),this.focusPageUpOption();break;case 34:e.preventDefault(),this.focusPageDownOption();break;case 35:if(e.shiftKey)break;e.preventDefault(),this.focusEndOption();break;case 36:if(e.shiftKey)break;e.preventDefault(),this.focusStartOption();break;case 46:!this.state.inputValue&&this.props.deleteRemoves&&(e.preventDefault(),this.popValue())}}},{key:"handleValueClick",value:function(e,t){this.props.onValueClick&&this.props.onValueClick(e,t)}},{key:"handleMenuScroll",value:function(e){if(this.props.onMenuScrollToBottom){var t=e.target;t.scrollHeight>t.offsetHeight&&t.scrollHeight-t.offsetHeight-t.scrollTop<=0&&this.props.onMenuScrollToBottom()}}},{key:"getOptionLabel",value:function(e){return e[this.props.labelKey]}},{key:"getValueArray",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:void 0,n="object"===(void 0===t?"undefined":E(t))?t:this.props;if(n.multi){if("string"==typeof e&&(e=e.split(n.delimiter)),!Array.isArray(e)){if(null===e||void 0===e)return[];e=[e]}return e.map(function(e){return R(e,n)}).filter(function(e){return e})}var r=R(e,n);return r?[r]:[]}},{key:"setValue",value:function(e){var t=this;if(this.props.autoBlur&&this.blurInput(),this.props.required){var n=M(e,this.props.multi);this.setState({required:n})}this.props.simpleValue&&e&&(e=this.props.multi?e.map(function(e){return e[t.props.valueKey]}).join(this.props.delimiter):e[this.props.valueKey]),this.props.onChange&&this.props.onChange(e)}},{key:"selectValue",value:function(e){var t=this;this.props.closeOnSelect&&(this.hasScrolledToOption=!1);var n=this.props.onSelectResetsInput?"":this.state.inputValue;this.props.multi?this.setState({focusedIndex:null,inputValue:this.handleInputValueChange(n),isOpen:!this.props.closeOnSelect},function(){t.getValueArray(t.props.value).some(function(n){return n[t.props.valueKey]===e[t.props.valueKey]})?t.removeValue(e):t.addValue(e)}):this.setState({inputValue:this.handleInputValueChange(n),isOpen:!this.props.closeOnSelect,isPseudoFocused:this.state.isFocused},function(){t.setValue(e)})}},{key:"addValue",value:function(e){var t=this.getValueArray(this.props.value),n=this._visibleOptions.filter(function(e){return!e.disabled}),r=n.indexOf(e);this.setValue(t.concat(e)),n.length-1===r?this.focusOption(n[r-1]):n.length>r&&this.focusOption(n[r+1])}},{key:"popValue",value:function(){var e=this.getValueArray(this.props.value);e.length&&!1!==e[e.length-1].clearableValue&&this.setValue(this.props.multi?e.slice(0,e.length-1):null)}},{key:"removeValue",value:function(e){var t=this,n=this.getValueArray(this.props.value);this.setValue(n.filter(function(n){return n[t.props.valueKey]!==e[t.props.valueKey]})),this.focus()}},{key:"clearValue",value:function(e){e&&"mousedown"===e.type&&0!==e.button||(e.preventDefault(),this.setValue(this.getResetValue()),this.setState({inputValue:this.handleInputValueChange(""),isOpen:!1},this.focus),this._focusAfterClear=!0)}},{key:"getResetValue",value:function(){return void 0!==this.props.resetValue?this.props.resetValue:this.props.multi?[]:null}},{key:"focusOption",value:function(e){this.setState({focusedOption:e})}},{key:"focusNextOption",value:function(){this.focusAdjacentOption("next")}},{key:"focusPreviousOption",value:function(){this.focusAdjacentOption("previous")}},{key:"focusPageUpOption",value:function(){this.focusAdjacentOption("page_up")}},{key:"focusPageDownOption",value:function(){this.focusAdjacentOption("page_down")}},{key:"focusStartOption",value:function(){this.focusAdjacentOption("start")}},{key:"focusEndOption",value:function(){this.focusAdjacentOption("end")}},{key:"focusAdjacentOption",value:function(e){var t=this._visibleOptions.map(function(e,t){return{option:e,index:t}}).filter(function(e){return!e.option.disabled});if(this._scrollToFocusedOptionOnUpdate=!0,!this.state.isOpen){var n={focusedOption:this._focusedOption||(t.length?t["next"===e?0:t.length-1].option:null),isOpen:!0};return this.props.onSelectResetsInput&&(n.inputValue=""),void this.setState(n)}if(t.length){for(var r=-1,o=0;o<t.length;o++)if(this._focusedOption===t[o].option){r=o;break}if("next"===e&&-1!==r)r=(r+1)%t.length;else if("previous"===e)r>0?r-=1:r=t.length-1;else if("start"===e)r=0;else if("end"===e)r=t.length-1;else if("page_up"===e){var i=r-this.props.pageSize;r=i<0?0:i}else if("page_down"===e){var u=r+this.props.pageSize;r=u>t.length-1?t.length-1:u}-1===r&&(r=0),this.setState({focusedIndex:t[r].index,focusedOption:t[r].option})}}},{key:"getFocusedOption",value:function(){return this._focusedOption}},{key:"selectFocusedOption",value:function(){if(this._focusedOption)return this.selectValue(this._focusedOption)}},{key:"renderLoading",value:function(){if(this.props.isLoading)return c.a.createElement("span",{className:"Select-loading-zone","aria-hidden":"true"},c.a.createElement("span",{className:"Select-loading"}))}},{key:"renderValue",value:function(e,t){var n=this,r=this.props.valueRenderer||this.getOptionLabel,o=this.props.valueComponent;if(!e.length)return function(e,t,n){var r=e.inputValue,o=e.isPseudoFocused,i=e.isFocused,u=t.onSelectResetsInput;return!r||!u&&!n&&!o&&!i}(this.state,this.props,t)?c.a.createElement("div",{className:"Select-placeholder"},this.props.placeholder):null;var i,u,a,s,l,f,p=this.props.onValueClick?this.handleValueClick:null;return this.props.multi?e.map(function(e,t){return c.a.createElement(o,{disabled:n.props.disabled||!1===e.clearableValue,id:n._instancePrefix+"-value-"+t,instancePrefix:n._instancePrefix,key:"value-"+t+"-"+e[n.props.valueKey],onClick:p,onRemove:n.removeValue,placeholder:n.props.placeholder,value:e},r(e,t),c.a.createElement("span",{className:"Select-aria-only"}," "))}):(i=this.state,u=this.props,a=i.inputValue,s=i.isPseudoFocused,l=i.isFocused,f=u.onSelectResetsInput,a&&(f||!l&&s||l&&!s)?void 0:(t&&(p=null),c.a.createElement(o,{disabled:this.props.disabled,id:this._instancePrefix+"-value-item",instancePrefix:this._instancePrefix,onClick:p,placeholder:this.props.placeholder,value:e[0]},r(e[0]))))}},{key:"renderInput",value:function(e,t){var n,r=this,i=u()("Select-input",this.props.inputProps.className),a=this.state.isOpen,s=u()((O(n={},this._instancePrefix+"-list",a),O(n,this._instancePrefix+"-backspace-remove-message",this.props.multi&&!this.props.disabled&&this.state.isFocused&&!this.state.inputValue),n)),l=this.state.inputValue;!l||this.props.onSelectResetsInput||this.state.isFocused||(l="");var f=S({},this.props.inputProps,{"aria-activedescendant":a?this._instancePrefix+"-option-"+t:this._instancePrefix+"-value","aria-describedby":this.props["aria-describedby"],"aria-expanded":""+a,"aria-haspopup":""+a,"aria-label":this.props["aria-label"],"aria-labelledby":this.props["aria-labelledby"],"aria-owns":s,className:i,onBlur:this.handleInputBlur,onChange:this.handleInputChange,onFocus:this.handleInputFocus,ref:function(e){return r.input=e},role:"combobox",required:this.state.required,tabIndex:this.props.tabIndex,value:l});if(this.props.inputRenderer)return this.props.inputRenderer(f);if(this.props.disabled||!this.props.searchable){var p=k(this.props.inputProps,[]),d=u()(O({},this._instancePrefix+"-list",a));return c.a.createElement("div",S({},p,{"aria-expanded":a,"aria-owns":d,"aria-activedescendant":a?this._instancePrefix+"-option-"+t:this._instancePrefix+"-value","aria-disabled":""+this.props.disabled,"aria-label":this.props["aria-label"],"aria-labelledby":this.props["aria-labelledby"],className:i,onBlur:this.handleInputBlur,onFocus:this.handleInputFocus,ref:function(e){return r.input=e},role:"combobox",style:{border:0,width:1,display:"inline-block"},tabIndex:this.props.tabIndex||0}))}return this.props.autosize?c.a.createElement(o.a,S({id:this.props.id},f,{minWidth:"5"})):c.a.createElement("div",{className:i,key:"input-wrap",style:{display:"inline-block"}},c.a.createElement("input",S({id:this.props.id},f)))}},{key:"renderClear",value:function(){var e=this.getValueArray(this.props.value);if(this.props.clearable&&e.length&&!this.props.disabled&&!this.props.isLoading){var t=this.props.multi?this.props.clearAllText:this.props.clearValueText,n=this.props.clearRenderer();return c.a.createElement("span",{"aria-label":t,className:"Select-clear-zone",onMouseDown:this.clearValue,onTouchEnd:this.handleTouchEndClearValue,onTouchMove:this.handleTouchMove,onTouchStart:this.handleTouchStart,title:t},n)}}},{key:"renderArrow",value:function(){if(this.props.arrowRenderer){var e=this.handleMouseDownOnArrow,t=this.state.isOpen,n=this.props.arrowRenderer({onMouseDown:e,isOpen:t});return n?c.a.createElement("span",{className:"Select-arrow-zone",onMouseDown:e},n):null}}},{key:"filterOptions",value:function(e){var t=this.state.inputValue,n=this.props.options||[];if(this.props.filterOptions){var r="function"==typeof this.props.filterOptions?this.props.filterOptions:m;return r(n,t,e,{filterOption:this.props.filterOption,ignoreAccents:this.props.ignoreAccents,ignoreCase:this.props.ignoreCase,labelKey:this.props.labelKey,matchPos:this.props.matchPos,matchProp:this.props.matchProp,trimFilter:this.props.trimFilter,valueKey:this.props.valueKey})}return n}},{key:"onOptionRef",value:function(e,t){t&&(this.focused=e)}},{key:"renderMenu",value:function(e,t,n){return e&&e.length?this.props.menuRenderer({focusedOption:n,focusOption:this.focusOption,inputValue:this.state.inputValue,instancePrefix:this._instancePrefix,labelKey:this.props.labelKey,onFocus:this.focusOption,onOptionRef:this.onOptionRef,onSelect:this.selectValue,optionClassName:this.props.optionClassName,optionComponent:this.props.optionComponent,optionRenderer:this.props.optionRenderer||this.getOptionLabel,options:e,removeValue:this.removeValue,selectValue:this.selectValue,valueArray:t,valueKey:this.props.valueKey}):this.props.noResultsText?c.a.createElement("div",{className:"Select-noresults"},this.props.noResultsText):null}},{key:"renderHiddenField",value:function(e){var t=this;if(this.props.name){if(this.props.joinValues){var n=e.map(function(e){return D(e[t.props.valueKey])}).join(this.props.delimiter);return c.a.createElement("input",{disabled:this.props.disabled,name:this.props.name,ref:function(e){return t.value=e},type:"hidden",value:n})}return e.map(function(e,n){return c.a.createElement("input",{disabled:t.props.disabled,key:"hidden."+n,name:t.props.name,ref:"value"+n,type:"hidden",value:D(e[t.props.valueKey])})})}}},{key:"getFocusableOptionIndex",value:function(e){var t=this._visibleOptions;if(!t.length)return null;var n=this.props.valueKey,r=this.state.focusedOption||e;if(r&&!r.disabled){var o=-1;if(t.some(function(e,t){var i=e[n]===r[n];return i&&(o=t),i}),-1!==o)return o}for(var i=0;i<t.length;i++)if(!t[i].disabled)return i;return null}},{key:"renderOuter",value:function(e,t,n){var r=this,o=this.renderMenu(e,t,n);return o?c.a.createElement("div",{ref:function(e){return r.menuContainer=e},className:"Select-menu-outer",style:this.props.menuContainerStyle},c.a.createElement("div",{className:"Select-menu",id:this._instancePrefix+"-list",onMouseDown:this.handleMouseDownOnMenu,onScroll:this.handleMenuScroll,ref:function(e){return r.menu=e},role:"listbox",style:this.props.menuStyle,tabIndex:-1},o)):null}},{key:"render",value:function(){var e=this,t=this.getValueArray(this.props.value),n=this._visibleOptions=this.filterOptions(this.props.multi&&this.props.removeSelected?t:null),r=this.state.isOpen;this.props.multi&&!n.length&&t.length&&!this.state.inputValue&&(r=!1);var o=this.getFocusableOptionIndex(t[0]),i=null;i=this._focusedOption=null!==o?n[o]:null;var a=u()("Select",this.props.className,{"has-value":t.length,"is-clearable":this.props.clearable,"is-disabled":this.props.disabled,"is-focused":this.state.isFocused,"is-loading":this.props.isLoading,"is-open":r,"is-pseudo-focused":this.state.isPseudoFocused,"is-searchable":this.props.searchable,"Select--multi":this.props.multi,"Select--rtl":this.props.rtl,"Select--single":!this.props.multi}),s=null;return this.props.multi&&!this.props.disabled&&t.length&&!this.state.inputValue&&this.state.isFocused&&this.props.backspaceRemoves&&(s=c.a.createElement("span",{id:this._instancePrefix+"-backspace-remove-message",className:"Select-aria-only","aria-live":"assertive"},this.props.backspaceToRemoveMessage.replace("{label}",t[t.length-1][this.props.labelKey]))),c.a.createElement("div",{ref:function(t){return e.wrapper=t},className:a,style:this.props.wrapperStyle},this.renderHiddenField(t),c.a.createElement("div",{ref:function(t){return e.control=t},className:"Select-control",onKeyDown:this.handleKeyDown,onMouseDown:this.handleMouseDown,onTouchEnd:this.handleTouchEnd,onTouchMove:this.handleTouchMove,onTouchStart:this.handleTouchStart,style:this.props.style},c.a.createElement("span",{className:"Select-multi-value-wrapper",id:this._instancePrefix+"-value"},this.renderValue(t,r),this.renderInput(t,o)),s,this.renderLoading(),this.renderClear(),this.renderArrow()),r?this.renderOuter(n,t,i):null)}}]),t}(c.a.Component);N.propTypes={"aria-describedby":s.a.string,"aria-label":s.a.string,"aria-labelledby":s.a.string,arrowRenderer:s.a.func,autoBlur:s.a.bool,autoFocus:s.a.bool,autofocus:s.a.bool,autosize:s.a.bool,backspaceRemoves:s.a.bool,backspaceToRemoveMessage:s.a.string,className:s.a.string,clearAllText:T,clearRenderer:s.a.func,clearValueText:T,clearable:s.a.bool,closeOnSelect:s.a.bool,deleteRemoves:s.a.bool,delimiter:s.a.string,disabled:s.a.bool,escapeClearsValue:s.a.bool,filterOption:s.a.func,filterOptions:s.a.any,id:s.a.string,ignoreAccents:s.a.bool,ignoreCase:s.a.bool,inputProps:s.a.object,inputRenderer:s.a.func,instanceId:s.a.string,isLoading:s.a.bool,joinValues:s.a.bool,labelKey:s.a.string,matchPos:s.a.string,matchProp:s.a.string,menuBuffer:s.a.number,menuContainerStyle:s.a.object,menuRenderer:s.a.func,menuStyle:s.a.object,multi:s.a.bool,name:s.a.string,noResultsText:T,onBlur:s.a.func,onBlurResetsInput:s.a.bool,onChange:s.a.func,onClose:s.a.func,onCloseResetsInput:s.a.bool,onFocus:s.a.func,onInputChange:s.a.func,onInputKeyDown:s.a.func,onMenuScrollToBottom:s.a.func,onOpen:s.a.func,onSelectResetsInput:s.a.bool,onValueClick:s.a.func,openOnClick:s.a.bool,openOnFocus:s.a.bool,optionClassName:s.a.string,optionComponent:s.a.func,optionRenderer:s.a.func,options:s.a.array,pageSize:s.a.number,placeholder:T,removeSelected:s.a.bool,required:s.a.bool,resetValue:s.a.any,rtl:s.a.bool,scrollMenuIntoView:s.a.bool,searchable:s.a.bool,simpleValue:s.a.bool,style:s.a.object,tabIndex:P,tabSelectsValue:s.a.bool,trimFilter:s.a.bool,value:s.a.any,valueComponent:s.a.func,valueKey:s.a.string,valueRenderer:s.a.func,wrapperStyle:s.a.object},N.defaultProps={arrowRenderer:p,autosize:!0,backspaceRemoves:!0,backspaceToRemoveMessage:"Press backspace to remove {label}",clearable:!0,clearAllText:"Clear all",clearRenderer:d,clearValueText:"Clear value",closeOnSelect:!0,deleteRemoves:!0,delimiter:",",disabled:!1,escapeClearsValue:!0,filterOptions:m,ignoreAccents:!0,ignoreCase:!0,inputProps:{},isLoading:!1,joinValues:!1,labelKey:"label",matchPos:"any",matchProp:"any",menuBuffer:0,menuRenderer:b,multi:!1,noResultsText:"No results found",onBlurResetsInput:!0,onCloseResetsInput:!0,onSelectResetsInput:!0,openOnClick:!0,optionComponent:A,pageSize:5,placeholder:"Select...",removeSelected:!0,required:!1,rtl:!1,scrollMenuIntoView:!0,searchable:!0,simpleValue:!1,tabSelectsValue:!0,trimFilter:!0,valueComponent:F,valueKey:"value"};var I={autoload:s.a.bool.isRequired,cache:s.a.any,children:s.a.func.isRequired,ignoreAccents:s.a.bool,ignoreCase:s.a.bool,loadOptions:s.a.func.isRequired,loadingPlaceholder:s.a.oneOfType([s.a.string,s.a.node]),multi:s.a.bool,noResultsText:s.a.oneOfType([s.a.string,s.a.node]),onChange:s.a.func,onInputChange:s.a.func,options:s.a.array.isRequired,placeholder:s.a.oneOfType([s.a.string,s.a.node]),searchPromptText:s.a.oneOfType([s.a.string,s.a.node]),value:s.a.any},B={},V={autoload:!0,cache:B,children:function(e){return c.a.createElement(N,e)},ignoreAccents:!0,ignoreCase:!0,loadingPlaceholder:"Loading...",options:[],searchPromptText:"Type to search"},z=function(e){function t(e,n){w(this,t);var r=_(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return r._cache=e.cache===B?{}:e.cache,r.state={inputValue:"",isLoading:!1,options:e.options},r.onInputChange=r.onInputChange.bind(r),r}return C(t,e),x(t,[{key:"componentDidMount",value:function(){this.props.autoload&&this.loadOptions("")}},{key:"componentWillReceiveProps",value:function(e){e.options!==this.props.options&&this.setState({options:e.options})}},{key:"componentWillUnmount",value:function(){this._callback=null}},{key:"loadOptions",value:function(e){var t=this,n=this.props.loadOptions,r=this._cache;if(r&&Object.prototype.hasOwnProperty.call(r,e))return this._callback=null,void this.setState({isLoading:!1,options:r[e]});var o=function n(o,i){var u=i&&i.options||[];r&&(r[e]=u),n===t._callback&&(t._callback=null,t.setState({isLoading:!1,options:u}))};this._callback=o;var i=n(e,o);i&&i.then(function(e){return o(0,e)},function(e){return o()}),this._callback&&!this.state.isLoading&&this.setState({isLoading:!0})}},{key:"onInputChange",value:function(e){var t=this.props,n=t.ignoreAccents,r=t.ignoreCase,o=t.onInputChange,i=e;if(o){var u=o(i);null!=u&&"object"!==(void 0===u?"undefined":E(u))&&(i=""+u)}var a=i;return n&&(a=v(a)),r&&(a=a.toLowerCase()),this.setState({inputValue:i}),this.loadOptions(a),i}},{key:"noResultsText",value:function(){var e=this.props,t=e.loadingPlaceholder,n=e.noResultsText,r=e.searchPromptText,o=this.state,i=o.inputValue;return o.isLoading?t:i&&n?n:r}},{key:"focus",value:function(){this.select.focus()}},{key:"render",value:function(){var e=this,t=this.props,n=t.children,r=t.loadingPlaceholder,o=t.placeholder,i=this.state,u=i.isLoading,a=i.options,s={noResultsText:this.noResultsText(),placeholder:u?r:o,options:u&&r?[]:a,ref:function(t){return e.select=t}};return n(S({},this.props,s,{isLoading:u,onInputChange:this.onInputChange}))}}]),t}(l.Component);z.propTypes=I,z.defaultProps=V;var K=function(e){function t(e,n){w(this,t);var r=_(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return r.filterOptions=r.filterOptions.bind(r),r.menuRenderer=r.menuRenderer.bind(r),r.onInputKeyDown=r.onInputKeyDown.bind(r),r.onInputChange=r.onInputChange.bind(r),r.onOptionSelect=r.onOptionSelect.bind(r),r}return C(t,e),x(t,[{key:"createNewOption",value:function(){var e=this.props,t=e.isValidNewOption,n=e.newOptionCreator,r=e.onNewOptionClick,o=e.options,i=void 0===o?[]:o;if(t({label:this.inputValue})){var u=n({label:this.inputValue,labelKey:this.labelKey,valueKey:this.valueKey});this.isOptionUnique({option:u,options:i})&&(r?r(u):(i.unshift(u),this.select.selectValue(u)))}}},{key:"filterOptions",value:function(){var e=this.props,t=e.filterOptions,n=e.isValidNewOption,r=e.promptTextCreator,o=(arguments.length<=2?void 0:arguments[2])||[],i=t.apply(void 0,arguments)||[];if(n({label:this.inputValue})){var u=this.props.newOptionCreator,a=u({label:this.inputValue,labelKey:this.labelKey,valueKey:this.valueKey});if(this.isOptionUnique({option:a,options:o.concat(i)})){var s=r(this.inputValue);this._createPlaceholderOption=u({label:s,labelKey:this.labelKey,valueKey:this.valueKey}),i.unshift(this._createPlaceholderOption)}}return i}},{key:"isOptionUnique",value:function(e){var t=e.option,n=e.options,r=this.props.isOptionUnique;return n=n||this.props.options,r({labelKey:this.labelKey,option:t,options:n,valueKey:this.valueKey})}},{key:"menuRenderer",value:function(e){var t=this.props.menuRenderer;return t(S({},e,{onSelect:this.onOptionSelect,selectValue:this.onOptionSelect}))}},{key:"onInputChange",value:function(e){var t=this.props.onInputChange;return this.inputValue=e,t&&(this.inputValue=t(e)),this.inputValue}},{key:"onInputKeyDown",value:function(e){var t=this.props,n=t.shouldKeyDownEventCreateNewOption,r=t.onInputKeyDown,o=this.select.getFocusedOption();o&&o===this._createPlaceholderOption&&n({keyCode:e.keyCode})?(this.createNewOption(),e.preventDefault()):r&&r(e)}},{key:"onOptionSelect",value:function(e){e===this._createPlaceholderOption?this.createNewOption():this.select.selectValue(e)}},{key:"focus",value:function(){this.select.focus()}},{key:"render",value:function(){var e=this,t=this.props,n=t.ref,r=k(t,["ref"]),o=this.props.children;return o||(o=L),o(S({},r,{allowCreate:!0,filterOptions:this.filterOptions,menuRenderer:this.menuRenderer,onInputChange:this.onInputChange,onInputKeyDown:this.onInputKeyDown,ref:function(t){e.select=t,t&&(e.labelKey=t.props.labelKey,e.valueKey=t.props.valueKey),n&&n(t)}}))}}]),t}(c.a.Component),L=function(e){return c.a.createElement(N,e)},W=function(e){var t=e.option,n=e.options,r=e.labelKey,o=e.valueKey;return!n||!n.length||0===n.filter(function(e){return e[r]===t[r]||e[o]===t[o]}).length},q=function(e){return!!e.label},U=function(e){var t=e.label,n=e.labelKey,r={};return r[e.valueKey]=t,r[n]=t,r.className="Select-create-option-placeholder",r},H=function(e){return'Create option "'+e+'"'},Y=function(e){switch(e.keyCode){case 9:case 13:case 188:return!0;default:return!1}};K.isOptionUnique=W,K.isValidNewOption=q,K.newOptionCreator=U,K.promptTextCreator=H,K.shouldKeyDownEventCreateNewOption=Y,K.defaultProps={filterOptions:m,isOptionUnique:W,isValidNewOption:q,menuRenderer:b,newOptionCreator:U,promptTextCreator:H,shouldKeyDownEventCreateNewOption:Y},K.propTypes={children:s.a.func,filterOptions:s.a.any,isOptionUnique:s.a.func,isValidNewOption:s.a.func,menuRenderer:s.a.any,newOptionCreator:s.a.func,onInputChange:s.a.func,onInputKeyDown:s.a.func,onNewOptionClick:s.a.func,options:s.a.array,promptTextCreator:s.a.func,ref:s.a.func,shouldKeyDownEventCreateNewOption:s.a.func};var X=function(e){function t(){return w(this,t),_(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return C(t,e),x(t,[{key:"focus",value:function(){this.select.focus()}},{key:"render",value:function(){var e=this;return c.a.createElement(z,this.props,function(t){var n=t.ref,r=k(t,["ref"]),o=n;return c.a.createElement(K,r,function(t){var n=t.ref,r=k(t,["ref"]),i=n;return e.props.children(S({},r,{ref:function(t){i(t),o(t),e.select=t}}))})})}}]),t}(c.a.Component);X.propTypes={children:s.a.func.isRequired},X.defaultProps={children:function(e){return c.a.createElement(N,e)}},N.Async=z,N.AsyncCreatable=X,N.Creatable=K,N.Value=F,N.Option=A,t.default=N},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(1),i=f(o),u=f(n(0)),a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(3)),s=f(n(21)),l=n(9),c=f(n(5));function f(e){return e&&e.__esModule?e:{default:e}}var p=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));n.handleClick=n.handleClick.bind(n),n.handleDoubleClick=n.handleDoubleClick.bind(n);var r=e.editable,o=e.columns,i=e.i;return n.state={notEditable:!(0,l.colIsEditable)(r,o[i])},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.Component),r(t,[{key:"componentWillReceiveProps",value:function(e){var t=e.editable,n=e.columns,r=e.i;this.setState({notEditable:!(0,l.colIsEditable)(t,n[r])})}},{key:"handleClick",value:function(e){var t=this.props,n=t.columns,r=t.editable,o=t.setProps,i=t.idx,u=t.i,s=t.is_focused,l=t.isSelected,c=t.selected_cell;if(r&&(s||e.preventDefault(),!l||1!==c.length)){e.preventDefault();var f=[i,u],p={is_focused:!1,active_cell:f},d=[];n.forEach(function(e,t){e.hidden||d.push(t)});var h=a.uniq(a.pluck(0,c)).sort(),v=a.uniq(a.pluck(1,c)).sort(),y=h[0],m=v[0];e.shiftKey?p.selected_cell=a.xprod(a.range(a.min(y,f[0]),a.max(y,f[0])+1),a.range(a.min(m,f[1]),a.max(m,f[1])+1)).filter(function(e){return a.contains(e[1],d)}):p.selected_cell=[f],o(p)}}},{key:"handleDoubleClick",value:function(e){var t=this.props,n=t.setProps,r=t.idx,o=t.i,i=t.is_focused;editable&&(i||(e.preventDefault(),n({selected_cell:[[r,o]],active_cell:[r,o],is_focused:!0})))}},{key:"componentDidUpdate",value:function(){var e=this.props,t=e.active_cell,n=e.idx,r=e.i,o=t[0]===n&&t[1]===r;this.textInput&&o&&this.props.is_focused&&this.textInput.focus()}},{key:"borderSquares",value:function(){var e=this.props,t=e.i,n=e.idx,r=e.columns,o=e.selected_cell,u=[];r.forEach(function(e,t){e.hidden||u.push(t)});var s=a.sort(function(e,t){return e-t}),l=s(a.uniq(a.pluck(0,o))),c=s(a.uniq(a.pluck(1,o))),f=t===a.last(c)+1,p=n===a.last(l)+1,d=f&&p?"bottom-right":"";return d?i.default.createElement("div",{className:"selected-square selected-square-"+d}):null}},{key:"fixedColumnStyle",value:function(){}},{key:"render",value:function(){var e=this,t=this.props,n=t.c,r=t.i,o=t.idx,u=t.isSelected,l=t.value,f=t.setProps,p=t.dataframe,d=t.is_focused,h=t.columns,v=t.selected_cell,y=t.active_cell,m=this.state.notEditable,b=y[0]===o&&y[1]===r,g=void 0;return g=!a.has("type",h[r])||a.contains(h[r].type,["numeric","text"])?i.default.createElement("input",{id:n.id+"-"+o,type:"text",value:l,onClick:this.handleClick,onDoubleClick:this.handleDoubleClick,ref:function(t){return e.textInput=t},onChange:function(e){if(!m&&u){var t=a.set(a.lensPath([o,n.id]),e.target.value,p);f({is_focused:!0,dataframe:t})}},onPaste:function(e){u&&d||e.preventDefault()},className:(b?"input-active ":"")+(d&&b?"focused ":"unfocused ")}):"dropdown"===h[r].type?i.default.createElement(s.default,{placeholder:"",options:h[r].options,onChange:function(e){var t=a.set(a.lensPath([o,n.id]),e?e.value:e,p);f({dataframe:t})},clearable:h[r].clearable,value:l}):l,i.default.createElement("td",{style:a.merge(c.default.scroll.borderStyle(this.props),c.default.scroll.cell(this.props,r)),className:(u&&v.length>1?"cell--selected ":"")+(d&&b?"focused ":"")+(m?"cell--uneditable ":"")},g,this.borderSquares())}}]),t}();t.default=p,p.propTypes={c:u.default.any,collapsable:u.default.any,columns:u.default.any,dataframe:u.default.any,editable:u.default.any,expanded_rows:u.default.any,i:u.default.any,idx:u.default.any,isSelected:u.default.any,is_focused:u.default.any,selected_cell:u.default.any,setProps:u.default.any,value:u.default.any,active_cell:u.default.array}},function(e,t){e.exports={prefix:"fas",iconName:"angle-down",icon:[320,512,[],"f107","M143 352.3L7 216.3c-9.4-9.4-9.4-24.6 0-33.9l22.6-22.6c9.4-9.4 24.6-9.4 33.9 0l96.4 96.4 96.4-96.4c9.4-9.4 24.6-9.4 33.9 0l22.6 22.6c9.4 9.4 9.4 24.6 0 33.9l-136 136c-9.2 9.4-24.4 9.4-33.8 0z"]}},function(e,t){e.exports={prefix:"fas",iconName:"angle-right",icon:[256,512,[],"f105","M224.3 273l-136 136c-9.4 9.4-24.6 9.4-33.9 0l-22.6-22.6c-9.4-9.4-9.4-24.6 0-33.9l96.4-96.4-96.4-96.4c-9.4-9.4-9.4-24.6 0-33.9L54.3 103c9.4-9.4 24.6-9.4 33.9 0l136 136c9.5 9.4 9.5 24.6.1 34z"]}},function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";n.r(t),function(e){var r=n(6),o=n(0),i=n.n(o),u=n(1),a=n.n(u),s="undefined"!=typeof window?window:void 0!==e?e:"undefined"!=typeof self?self:{};var l,c=(function(e){var t,n,r,o,i,u,a,l,c,f,p,d,h,v,y;t=s,n=function(e,t,r){if(!l(t)||f(t)||p(t)||d(t)||a(t))return t;var o,i=0,u=0;if(c(t))for(o=[],u=t.length;i<u;i++)o.push(n(e,t[i],r));else for(var s in o={},t)Object.prototype.hasOwnProperty.call(t,s)&&(o[e(s,r)]=n(e,t[s],r));return o},r=function(e){return h(e)?e:(e=e.replace(/[\-_\s]+(.)?/g,function(e,t){return t?t.toUpperCase():""})).substr(0,1).toLowerCase()+e.substr(1)},o=function(e){var t=r(e);return t.substr(0,1).toUpperCase()+t.substr(1)},i=function(e,t){return function(e,t){var n=(t=t||{}).separator||"_",r=t.split||/(?=[A-Z])/;return e.split(r).join(n)}(e,t).toLowerCase()},u=Object.prototype.toString,a=function(e){return"function"==typeof e},l=function(e){return e===Object(e)},c=function(e){return"[object Array]"==u.call(e)},f=function(e){return"[object Date]"==u.call(e)},p=function(e){return"[object RegExp]"==u.call(e)},d=function(e){return"[object Boolean]"==u.call(e)},h=function(e){return(e-=0)==e},v=function(e,t){var n=t&&"process"in t?t.process:t;return"function"!=typeof n?e:function(t,r){return n(t,e,r)}},y={camelize:r,decamelize:i,pascalize:o,depascalize:i,camelizeKeys:function(e,t){return n(v(r,t),e)},decamelizeKeys:function(e,t){return n(v(i,t),e,t)},pascalizeKeys:function(e,t){return n(v(o,t),e)},depascalizeKeys:function(){return this.decamelizeKeys.apply(this,arguments)}},e.exports?e.exports=y:t.humps=y}(l={exports:{}},l.exports),l.exports),f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},p=(function(){function e(e){this.value=e}function t(t){var n,r;function o(n,r){try{var u=t[n](r),a=u.value;a instanceof e?Promise.resolve(a.value).then(function(e){o("next",e)},function(e){o("throw",e)}):i(u.done?"return":"normal",u.value)}catch(e){i("throw",e)}}function i(e,t){switch(e){case"return":n.resolve({value:t,done:!0});break;case"throw":n.reject(t);break;default:n.resolve({value:t,done:!1})}(n=n.next)?o(n.key,n.arg):r=null}this._invoke=function(e,t){return new Promise(function(i,u){var a={key:e,arg:t,resolve:i,reject:u,next:null};r?r=r.next=a:(n=r=a,o(e,t))})},"function"!=typeof t.return&&(this.return=void 0)}"function"==typeof Symbol&&Symbol.asyncIterator&&(t.prototype[Symbol.asyncIterator]=function(){return this}),t.prototype.next=function(e){return this._invoke("next",e)},t.prototype.throw=function(e){return this._invoke("throw",e)},t.prototype.return=function(e){return this._invoke("return",e)}}(),function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}),d=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},h=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n},v=function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)};function y(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=(t.children||[]).map(y.bind(null,e)),o=Object.keys(t.attributes||{}).reduce(function(e,n){var r=t.attributes[n];switch(n){case"class":e.attrs.className=r,delete t.attributes.class;break;case"style":e.attrs.style=r.split(";").map(function(e){return e.trim()}).filter(function(e){return e}).reduce(function(e,t){var n,r=t.indexOf(":"),o=c.camelize(t.slice(0,r)),i=t.slice(r+1).trim();return o.startsWith("webkit")?e[(n=o,n.charAt(0).toUpperCase()+n.slice(1))]=i:e[o]=i,e},{});break;default:0===n.indexOf("aria-")||0===n.indexOf("data-")?e.attrs[n.toLowerCase()]=r:e.attrs[c.camelize(n)]=r}return e},{attrs:{}}),i=n.style,u=void 0===i?{}:i,a=h(n,["style"]);return o.attrs.style=d({},o.attrs.style,u),e.apply(void 0,[t.tag,d({},o.attrs,a)].concat(v(r)))}var m=!1;try{m=!0}catch(e){}var b=function(){var e;!m&&console&&"function"==typeof console.error&&(e=console).error.apply(e,arguments)};function g(e,t){return Array.isArray(t)&&t.length>0||!Array.isArray(t)&&t?p({},e,t):{}}function E(e){return null===e?null:"object"===(void 0===e?"undefined":f(e))&&e.prefix&&e.iconName?e:Array.isArray(e)&&2===e.length?{prefix:e[0],iconName:e[1]}:"string"==typeof e?{prefix:"fas",iconName:e}:void 0}function w(e){var t=e.icon,n=e.mask,o=e.symbol,i=e.className,u=E(t),s=g("classes",[].concat(v(function(e){var t,n=(t={"fa-spin":e.spin,"fa-pulse":e.pulse,"fa-fw":e.fixedWidth,"fa-border":e.border,"fa-li":e.listItem,"fa-flip-horizontal":"horizontal"===e.flip||"both"===e.flip,"fa-flip-vertical":"vertical"===e.flip||"both"===e.flip},p(t,"fa-"+e.size,null!==e.size),p(t,"fa-rotate-"+e.rotation,null!==e.rotation),p(t,"fa-pull-"+e.pull,null!==e.pull),t);return Object.keys(n).map(function(e){return n[e]?e:null}).filter(function(e){return e})}(e)),v(i.split(" ")))),l=g("transform","string"==typeof e.transform?r.a.parse.transform(e.transform):e.transform),c=g("mask",E(n)),f=r.a.icon(u,d({},s,l,c,{symbol:o}));if(!f)return b("Could not find icon",u),null;var h=f.abstract,m=y.bind(null,a.a.createElement),x={};return Object.keys(e).forEach(function(t){w.defaultProps.hasOwnProperty(t)||(x[t]=e[t])}),m(h[0],x)}w.displayName="FontAwesomeIcon",w.propTypes={border:i.a.bool,className:i.a.string,mask:i.a.oneOfType([i.a.object,i.a.array,i.a.string]),fixedWidth:i.a.bool,flip:i.a.oneOf(["horizontal","vertical","both"]),icon:i.a.oneOfType([i.a.object,i.a.array,i.a.string]),listItem:i.a.bool,pull:i.a.oneOf(["right","left"]),pulse:i.a.bool,name:i.a.string,rotation:i.a.oneOf([90,180,270]),size:i.a.oneOf(["lg","xs","sm","1x","2x","3x","4x","5x","6x","7x","8x","9x","10x"]),spin:i.a.bool,symbol:i.a.oneOfType([i.a.bool,i.a.string]),transform:i.a.oneOfType([i.a.string,i.a.object])},w.defaultProps={border:!1,className:"",mask:null,fixedWidth:!1,flip:null,icon:null,listItem:!1,pull:null,pulse:!1,name:"",rotation:null,size:null,spin:!1,symbol:!1,transform:null},r.a.noAuto(),t.default=w}.call(this,n(25))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(1),u=h(i),a=h(n(0)),s=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(3)),l=h(n(26)),c=h(n(24)),f=h(n(23)),p=h(n(22)),d=h(n(5));function h(e){return e&&e.__esModule?e:{default:e}}var v=function(e){return Array.isArray(e.name)?e.name.length:1},y=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.Component),o(t,[{key:"render",value:function(){var e=this,t=this.props,n=t.columns,o=t.dataframe,i=t.idx,a=t.editable,h=t.setProps,y=t.selected_cell,m=t.selected_rows,b=t.collapsable,g=t.expanded_rows,E=t.row_selectable,w=b?u.default.createElement("td",{className:"toggle-row\n                "+(s.contains(i,g)?"toggle-row--expanded":""),onClick:function(){console.info("Click "+i+", "+g),s.contains(i,g)?h({expanded_rows:s.without([i],g)}):h({expanded_rows:s.append(i,g)})}},s.contains(i,g)?u.default.createElement(l.default,{icon:f.default}):u.default.createElement(l.default,{icon:c.default})):null,x=E?u.default.createElement("td",{style:s.merge(d.default.scroll.borderStyle(s.merge({i:-1},this.props)),{width:30})},u.default.createElement("input",{type:"single"===E?"radio":"checkbox",name:"row-select",style:{marginLeft:"auto",marginRight:"auto",width:15,display:"block"},checked:s.contains(i,m),onChange:function(){return h({selected_rows:"single"===E?[i]:s.ifElse(s.contains(i),s.without([i]),s.append(i))(m)})}})):null,O=n.map(function(t,n){return t.hidden?null:u.default.createElement(p.default,r({key:t+"-"+n,value:o[i][t.id],type:t.type,editable:a,isSelected:s.contains([i,n],y),idx:i,i:n,c:t,setProps:h},e.props))}),S=Math.max.apply(Math,n.map(v));return u.default.createElement("tr",{style:d.default.scroll.row(this.props,i+S),className:s.contains(i,m)?"selected-row":""},w,x,O)}}]),t}();t.default=y,y.propTypes={columns:a.default.any,dataframe:a.default.any,idx:a.default.any,editable:a.default.any,setProps:a.default.any,selected_cell:a.default.any,collapsable:a.default.any,expanded_rows:a.default.any,active_cell:a.default.any}},function(e,t){!function(t){"use strict";function n(){}function r(e){return e.split('"').length-1}n.prototype=Object.create(Object.prototype,{parse:{value:function(e){var t,n,o,i,u,a,s,l=[],c=0;for((o=e.split("\n")).length>1&&""===o[o.length-1]&&o.pop(),t=0,n=o.length;t<n;t+=1){for(o[t]=o[t].split("\t"),i=0,u=o[t].length;i<u;i+=1)l[c]||(l[c]=[]),a&&0===i?(s=l[c].length-1,l[c][s]=l[c][s]+"\n"+o[t][0],a&&1&r(o[t][0])&&(a=!1,l[c][s]=l[c][s].substring(0,l[c][s].length-1).replace(/""/g,'"'))):i===u-1&&0===o[t][i].indexOf('"')&&1&r(o[t][i])?(l[c].push(o[t][i].substring(1).replace(/""/g,'"')),a=!0):(l[c].push(o[t][i].replace(/""/g,'"')),a=!1);a||(c+=1)}return l},enumerable:!0,configurable:!1,writable:!1},stringify:{value:function(e){var t,n,r,o,i,u="";for(t=0,n=e.length;t<n;t+=1){for(r=0,o=e[t].length;r<o;r+=1)r>0&&(u+="\t"),"string"==typeof(i=e[t][r])?i.indexOf("\n")>-1?u+='"'+i.replace(/"/g,'""')+'"':u+=i:u+=null===i||void 0===i?"":i;u+="\n"}return u},enumerable:!0,configurable:!1,writable:!1}}),void 0!==e&&e.exports?e.exports=n:t.SheetClip=n}(this)},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";var r=function(e){};e.exports=function(e,t,n,o,i,u,a,s){if(r(t),!e){var l;if(void 0===t)l=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,o,i,u,a,s],f=0;(l=new Error(t.replace(/%s/g,function(){return c[f++]}))).name="Invariant Violation"}throw l.framesToPop=1,l}}},function(e,t,n){"use strict";function r(e){return function(){return e}}var o=function(){};o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(e){return e},e.exports=o},function(e,t,n){"use strict";var r=n(31),o=n(30),i=n(29);e.exports=function(){function e(e,t,n,r,u,a){a!==i&&o(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types")}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return n.checkPropTypes=r,n.PropTypes=n,n}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(1),u=y(i),a=y(n(0)),s=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(3)),l=y(n(28)),c=y(n(27)),f=y(n(20)),p=n(9),d=n(19),h=n(18),v=y(n(5));function y(e){return e&&e.__esModule?e:{default:e}}function m(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function b(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function g(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}n(17),n(14),n(12);var E=function(e){function t(e){m(this,t);var n=b(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={},n}return g(t,i.Component),o(t,[{key:"render",value:function(){var e=this;if(this.props.setProps)return u.default.createElement(w,s.merge(this.props,{setProps:function(t){s.has("dataframe",t)&&(t.dataframe_timestamp=Date.now()),e.props.setProps(t)}}));var t=s.mergeAll([this.props,this.state,{setProps:function(t){return e.setState(t)}}]);return u.default.createElement(w,t)}}]),t}();t.default=E;var w=function(e){function t(e){m(this,t);var n=b(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.handleKeyDown=n.handleKeyDown.bind(n),n.collectRows=n.collectRows.bind(n),n.onPaste=n.onPaste.bind(n),n}return g(t,i.Component),o(t,[{key:"componentDidMount",value:function(){this.props.selected_cell.length&&!s.contains(this.props.active_cell,this.props.selected_cell)&&this.props.setProps({active_cell:this.props.selected_cell[0]})}},{key:"handleKeyDown",value:function(e){var t=this.props,n=t.active_cell,r=t.columns,o=t.setProps,i=t.is_focused,u=t.editable;console.warn("handleKeyDown: "+e.key);var a=(0,d.isCtrlDown)(e);(0,d.isCtrlMetaKey)(e.keyCode)||a&&e.keyCode===d.KEY_CODES.V||(e.keyCode!==d.KEY_CODES.C||!a||i?e.keyCode!==d.KEY_CODES.ESCAPE?e.keyCode!==d.KEY_CODES.ENTER||i||!(0,p.colIsEditable)(u,r[n[1]])?i&&e.keyCode!==d.KEY_CODES.TAB&&e.keyCode!==d.KEY_CODES.ENTER||((0,d.isNavKey)(e.keyCode)?this.switchCell(e):e.keyCode===d.KEY_CODES.BACKSPACE||e.keyCode===d.KEY_CODES.DELETE?this.deleteCell(e):this.props.is_focused||!(0,p.colIsEditable)(u,r[n[1]])||(0,d.isMetaKey)(e.keyCode)||o({is_focused:!0})):o({is_focused:!0}):o({is_focused:!1}):this.onCopy(e))}},{key:"switchCell",value:function(e){var t=e,n=this.props,r=n.active_cell,o=n.columns,i=n.dataframe,u=n.selected_cell,a=n.setProps,l=u.length>1,c=t.keyCode===d.KEY_CODES.ENTER||t.keyCode===d.KEY_CODES.TAB;if(l&&c)a({is_focused:!1,active_cell:this.getNextCell(t,{currentCell:r,restrictToSelection:!0})});else if(t.shiftKey){var f=[],p=[],h=s.uniq(s.pluck(0,u)).sort(),v=s.uniq(s.pluck(1,u)).sort(),y=h[0],m=v[0],b=h[h.length-1],g=v[v.length-1],E=[];o.forEach(function(e,t){e.hidden||E.push(t)});var w=t.keyCode===d.KEY_CODES.ARROW_DOWN||t.keyCode===d.KEY_CODES.ENTER,x=t.keyCode===d.KEY_CODES.ARROW_UP,O=t.keyCode===d.KEY_CODES.ARROW_RIGHT||t.keyCode===d.KEY_CODES.TAB,S=t.keyCode===d.KEY_CODES.ARROW_LEFT;w&&r[0]>y?p=v.map(function(e){return[y,e]}):w&&b!==i.length-1?f=v.map(function(e){return[b+1,e]}):x&&r[0]<b?p=v.map(function(e){return[b,e]}):x&&y>0?f=v.map(function(e){return[y-1,e]}):S&&r[1]<g?p=h.map(function(e){return[e,g]}):S&&m>0?f=h.map(function(e){return[e,m-1]}):O&&r[1]>m?p=h.map(function(e){return[e,m]}):O&&g+1<=s.last(E)&&(f=h.map(function(e){return[e,g+1]})),a({is_focused:!1,selected_cell:s.without(p,s.uniq(s.concat(f,u)))})}else{var C=this.getNextCell(t,{currentCell:r,restrictToSelection:!1});a({is_focused:!1,selected_cell:[C],active_cell:C})}}},{key:"deleteCell",value:function(e){var t=this.props,n=t.columns,r=t.dataframe,o=t.editable,i=t.selected_cell,u=t.setProps;e.preventDefault();var a=r;i.forEach(function(e){(0,p.colIsEditable)(o,n[e[1]])&&(a=s.set(s.lensPath([e[0],n[e[1]].id]),"",a))}),u({dataframe:a})}},{key:"getNextCell",value:function(e,t){var n=t.restrictToSelection,r=t.currentCell,o=this.props,i=o.dataframe,u=o.columns,a=o.selected_cell,l=e,c=[];switch(n||u.forEach(function(e,t){e.hidden||c.push(t)}),l.keyCode){case d.KEY_CODES.ARROW_LEFT:return n?(0,h.selectionCycle)([r[0],r[1]-1],a):[r[0],s.max(c[0],c[s.indexOf(r[1],c)-1])];case d.KEY_CODES.ARROW_RIGHT:case d.KEY_CODES.TAB:return n?(0,h.selectionCycle)([r[0],r[1]+1],a):[r[0],s.min(s.last(c),c[s.indexOf(r[1],c)+1])];case d.KEY_CODES.ARROW_UP:return n?(0,h.selectionCycle)([r[0]-1,r[1]],a):[s.max(0,r[0]-1),r[1]];case d.KEY_CODES.ARROW_DOWN:case d.KEY_CODES.ENTER:return n?(0,h.selectionCycle)([r[0]+1,r[1]],a):[s.min(i.length-1,r[0]+1),r[1]];default:throw new Error("Table.getNextCell: unknown navigation keycode "+l.keyCode)}}},{key:"onCopy",value:function(e){var t=this.props,n=t.columns,r=t.dataframe,o=t.selected_cell;e.preventDefault();var i=document.createElement("textarea"),u=s.uniq(s.pluck(0,o).sort()),a=s.uniq(s.pluck(1,o).sort()),l=s.slice(s.head(u),s.last(u)+1,r).map(function(e){return s.props(a,s.props(s.pluck("id",n),e))});i.value=l.map(function(e){return s.values(e).join("\t")}).join("\r\n"),i.setAttribute("readonly",""),document.body.appendChild(i);var c=!1;document.getSelection().rangeCount>0&&(c=document.getSelection().getRangeAt(0)),i.select(),document.execCommand("copy"),document.body.removeChild(i),c&&(document.getSelection().removeAllRanges(),document.getSelection().addRange(c)),this._table.focus()}},{key:"onPaste",value:function(e){var t=this.props,n=t.columns,r=t.dataframe,o=t.editable,i=t.setProps,u=t.is_focused,a=t.active_cell;if(e&&e.clipboardData&&!u){var c=e.clipboardData.getData("text/plain");if(c){var f=l.default.prototype.parse(c),d=r,h=n;if(f[0].length+a[1]>=n.length)for(var v=function(e){h.push({id:"Column "+(e+1),type:"numeric"}),d.forEach(function(t){return t["Column "+e]=""})},y=n.length;y<f[0].length+a[1];y++)v(y);if(f.length+a[0]>=r.length){var m={};n.forEach(function(e){return m[e.name]=""}),d=s.concat(d,s.repeat(m,f.length+a[0]-r.length))}f.forEach(function(e,t){return e.forEach(function(e,n){var r=a[0]+t,i=a[1]+n,u=h[i];(0,p.colIsEditable)(o,u)&&(d=s.set(s.lensPath([r,u.id]),e,d))})}),i({dataframe:d,columns:h})}}}},{key:"collectRows",value:function(e,t){for(var n=this.props,o=n.collapsable,i=n.columns,a=n.expanded_rows,l=n.row_selectable,f=[],p=0;p<e.length;p++){var d=e[p];f.push(u.default.createElement(c.default,r({key:t+p,row:d,idx:t+p},this.props))),o&&s.contains(t+p,a)&&f.push(u.default.createElement("tr",null,u.default.createElement("td",{className:"expanded-row--empty-cell"}),u.default.createElement("td",{colSpan:i.length+(l?1:0),className:"expanded-row"},u.default.createElement("h1",null,"More About Row "+(t+p)))))}return f}},{key:"render",value:function(){var e=this,t=this.props,n=t.collapsable,r=t.columns,o=t.dataframe,i=t.display_row_count,a=t.display_tail_count,l=t.table_style,c=t.n_fixed_columns,p=t.n_fixed_rows,d=t.row_selectable,h=u.default.createElement("table",{ref:function(t){return e._table=t},onPaste:this.onPaste,tabIndex:-1,style:l},u.default.createElement(f.default,this.props),u.default.createElement("tbody",null,this.collectRows(o.slice(0,i),0),o.length<i+a?null:u.default.createElement("tr",null,n?u.default.createElement("td",{className:"expanded-row--empty-cell"}):null,u.default.createElement("td",{className:"elip",colSpan:r.length+(d?1:0)},"...")),o.length<i?null:this.collectRows(o.slice(s.max(o.length-a,i),o.length),s.max(o.length-a,i)))),y=null;return(c||p)&&(y=v.default.scroll.containerDiv(this.props)),u.default.createElement("div",{className:"dash-spreadsheet",style:y,onKeyDown:this.handleKeyDown},h)}}]),t}();E.defaultProps={changed_data:{},editable:!1,active_cell:[],index_name:"",types:{},merged_styles:{},selected_cell:[[]],selected_rows:[],row_selectable:!1,display_row_count:20,display_tail_count:5,base_styles:{numeric:{"text-align":"right","font-family":"'Droid Sans Mono', Courier, monospace"},string:{"text-align":"left"},input:{padding:0,margin:0,width:"80px",border:"none","font-size":"1rem"},"input-active":{outline:"#7FDBFF auto 3px"},table:{},thead:{},th:{},td:{}}},E.propTypes={active_cell:a.default.array,collapsable:a.default.bool,columns:a.default.arrayOf(a.default.object),dataframe_timestamp:a.default.any,dataframe:a.default.arrayOf(a.default.object),display_row_count:a.default.number,display_tail_count:a.default.number,editable:a.default.bool,end_cell:a.default.arrayOf(a.default.number),expanded_rows:a.default.array,id:a.default.string,is_focused:a.default.bool,merge_duplicate_headers:a.default.bool,n_fixed_columns:a.default.number,n_fixed_rows:a.default.number,row_selectable:a.default.oneOf(["single","multi"]),selected_cell:a.default.arrayOf(a.default.number),selected_rows:a.default.arrayOf(a.default.number),setProps:a.default.any,sort:a.default.array,sortable:a.default.bool,start_cell:a.default.arrayOf(a.default.number),style_as_list_view:a.default.bool,table_style:a.default.any}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Table=void 0;var r,o=n(33),i=(r=o)&&r.__esModule?r:{default:r};t.Table=i.default}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,